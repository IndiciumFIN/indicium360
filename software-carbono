import React, { useState, useEffect, useMemo, useRef } from 'react';
import { createPortal } from 'react-dom';
import { initializeApp } from 'firebase/app';
import { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from 'firebase/auth';
import { getFirestore, collection, addDoc, onSnapshot, query, doc, deleteDoc, updateDoc, setDoc, getDoc, writeBatch, limit, orderBy, startAfter, where } from 'firebase/firestore';
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend, CartesianGrid, LineChart, Line, ScatterChart, Scatter, ZAxis } from 'recharts';

// --- Ícones SVG ---
const MenuIcon = () => <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h16"></path></svg>;
const CloseIcon = () => <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path></svg>;
const DashboardIcon = () => <svg className="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1V10a1 1 0 00-1-1H7a1 1 0 00-1 1v10a1 1 0 001 1h3z"></path></svg>;
const DatabaseIcon = () => <svg className="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4"></path></svg>;
const StrategyIcon = () => <svg className="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path></svg>;
const DocumentReportIcon = () => <svg className="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>;
const SettingsIcon = () => <svg className="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924-1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>;
const PlusIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-6 h-6 mr-2" aria-hidden="true"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>;
const TrashIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" aria-hidden="true"><path d="M3 6h18M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2M10 11v6M14 11v6" /></svg>;
const BuildingIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5 mr-2" aria-hidden="true"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="3" y1="9" x2="21" y2="9"></line><line x1="9" y1="21" x2="9" y2="9"></line></svg>;
const RiskIcon = () => <svg className="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path></svg>;
const ChainIcon = () => <svg className="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg>;
const MarketIcon = () => <svg className="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path></svg>;
const DownloadIcon = () => <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path></svg>;
const InfoIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" className="bi bi-info-circle" viewBox="0 0 16 16" aria-hidden="true"><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/><path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.064.293.006.399.287.47l.45.082.082-.38-2.29-.287zM8 5.5a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/></svg>;
const LibraryIcon = () => <svg className="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 14v3m4-3v3m4-3v3M3 21h18M3 10h18M3 7l9-4 9 4M4 10h16v11H4V10z"></path></svg>;
const AlertIcon = () => <svg className="w-6 h-6 mr-3 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path></svg>;
const QuestionMarkCircleIcon = () => <svg className="w-4 h-4 ml-1 text-gray-400 hover:text-gray-600" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.868.504l-2 3.5a1 1 0 001.736 1l.664-1.162.664 1.162a1 1 0 101.736-1l-2-3.5A1 1 0 0010 7zM9 14.5a.5.5 0 001 0V14a.5.5 0 00-1 0v.5zm1.5-3.5a.5.5 0 00-1 0v2.5a.5.5 0 001 0V11z" clipRule="evenodd"></path></svg>
const CheckCircleIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" /></svg>;
const XCircleIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" /></svg>;
const TimelineIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" d="M8 7V3m8 4V3m-9 8h.01M16 11h.01M9 15h.01M15 15h.01M9 19h.01M15 19h.01M10 9l-3 3m0 0l3 3m0-3h7m-8 3L4 12l-4 4"></path></svg>;
const UserIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" /></svg>;
const GuestIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" /></svg>;
const BookOpenIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" d="M12 6.253v13m0-13C10.832 5.483 9.493 5 8 5c-3.31 0-6 2.69-6 6 0 2.203 1.258 4.148 3.125 5.176M12 6.253c1.168.77 2.507 1.253 4 1.253 3.31 0 6-2.69 6-6 0-2.203-1.258-4.148-3.125-5.176" /></svg>;
const AuditIcon = () => <svg className="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path></svg>;

// Tooltip Component
const TooltipInfo = ({ text }) => (
    <div className="relative group flex items-center">
        <InfoIcon className="text-gray-400 hover:text-gray-600 cursor-pointer" />
        <div className="absolute left-1/2 -translate-x-1/2 bottom-full mb-2 w-64 p-2 text-sm text-gray-700 bg-white rounded-lg shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none">
            {text}
        </div>
    </div>
);

// Função utilitária para sanitizar strings e prevenir XSS
const sanitizeString = (str) => {
    if (!str) return '';
    const div = document.createElement('div');
    div.textContent = str;
    return div.innerHTML;
};

// --- Constantes de Estilo e Dados ---
// WCAG: Cores ajustadas para maior contraste (AA) e paleta mais profissional
const COLORS = { darkBlue: '#0A2F5B', cyan: '#1A8778', orange: '#FF8800', lightBlue: '#5B9DD9', gray: '#6B7280', purple: '#6D28D9' };
const SCOPE_COLORS = { 'Escopo 1': COLORS.darkBlue, 'Escopo 2': COLORS.cyan, 'Escopo 3': COLORS.orange, 'Todos': COLORS.cyan };

// Cores para o gráfico de pizza ajustadas para melhor contraste visual
const PIE_COLORS = [
    '#0A2F5B', // Escopo 1
    '#1A8778', // Escopo 2
    '#FF8800'  // Escopo 3
];

// Mapeamento de categorias para unidades padrão
const defaultUnits = {
    'Combustão Estacionária': 'litros',
    'Combustão Móvel': 'litros',
    'Eletricidade Adquirida': 'kwh',
    '6. Viagens de Negócios': 'km',
    '5. Resíduos Gerados nas Operações': 'toneladas',
    '1. Bens e Serviços Adquiridos': 'eur',
};

// --- MÓDULO 3: MOTOR DE CÁLCULO E FATORES DE EMISSÃO ---
const emissionFactorsLibraries = {
    'Global': {
        'GHG Protocol / IPCC': {
            'Combustão Móvel': { 'gasolina': { unit: 'litros', factor: 2.31 }, 'diesel': { unit: 'litros', factor: 2.68 } },
            'Eletricidade Adquirida': { 'kwh': { unit: 'kwh', factor: 0.475 } },
            '6. Viagens de Negócios': { 'km': { unit: 'km', factor: 0.18 } },
            '5. Resíduos Gerados nas Operações': { 'toneladas': { unit: 'toneladas', factor: 460 } },
            '1. Bens e Serviços Adquiridos': { 'eur': { unit: 'eur', factor: 0.5 } }, // Fator genérico por € gasto
        },
        'IEA (Agência Internacional de Energia)': {
            'Eletricidade Adquirida': { 'kwh': { unit: 'kwh', factor: 0.450 } },
        },
    },
    'Nacional (Brasil)': {
        'MCTI (Ministério da Ciência, Tecnologia e Inovação)': {
            'Combustão Móvel': { 'gasolina': { unit: 'litros', factor: 2.25 }, 'diesel': { unit: 'litros', factor: 2.65 } },
            'Eletricidade Adquirida': { 'kwh': { unit: 'kwh', factor: 0.0708 } },
        },
        'ANEEL (Agência Nacional de Energia Elétrica)': {
             'Eletricidade Adquirida': { 'kwh': { unit: 'kwh', factor: 0.071 } },
        }
    },
    'Setorial e Técnico': {
        'EUA (EPA)': {
            'Combustão Móvel': { 'gasolina': { unit: 'litros', factor: 2.30 }, 'diesel': { unit: 'litros', factor: 2.70 } },
            'Eletricidade Adquirida': { 'kwh': { unit: 'kwh', factor: 0.37 } },
        },
        'Reino Unido (DEFRA)': {
            'Combustão Móvel': { 'gasolina': { unit: 'litros', factor: 2.21 }, 'diesel': { unit: 'litros', factor: 2.54 } },
            'Eletricidade Adquirida': { 'kwh': { unit: 'kwh', factor: 0.212 } },
        },
    }
};

const calculateEmissions = (activity, unit, quantity, activeLibraries) => {
    let factorData = null;
    let factorSource = 'Nenhum fator encontrado';
    
    // Procura primeiro nas bibliotecas ativas
    for (const group in emissionFactorsLibraries) {
        for (const libName of activeLibraries) {
            if (emissionFactorsLibraries[group][libName]) {
                const data = emissionFactorsLibraries[group][libName];
                if (data[activity]?.[unit.toLowerCase()]) {
                    factorData = data[activity][unit.toLowerCase()];
                    factorSource = libName;
                    break;
                }
            }
        }
        if (factorData) break;
    }

    // Se não encontrar, usa GHG Protocol como fallback
    if (!factorData) {
        factorData = emissionFactorsLibraries['Global']['GHG Protocol / IPCC'][activity]?.[unit.toLowerCase()];
        if (factorData) {
            factorSource = 'GHG Protocol / IPCC (Fallback)';
        }
    }

    if (factorData) {
        return {
            emissions_kgCO2e: quantity * factorData.factor,
            factor_value: factorData.factor,
            factor_source: factorSource,
        };
    }

    return { emissions_kgCO2e: 0, factor_value: null, factor_source: 'Nenhum fator encontrado' };
};

// --- Componentes Reutilizáveis ---
const KpiCard = ({ title, value, unit, infoText }) => ( 
    <div className="bg-white p-4 md:p-6 rounded-xl shadow-lg transition-transform transform hover:-translate-y-1">
        <div className="flex items-center justify-between">
            <h3 className="text-gray-500 text-sm font-medium truncate">{title}</h3>
            {infoText && <TooltipInfo text={infoText} />}
        </div>
        <p className="text-2xl xl:text-3xl font-bold text-gray-800 mt-2">{value} <span className="text-base xl:text-lg font-medium text-gray-500">{unit}</span></p>
    </div>
);
const GoalCard = ({ goal, onDelete }) => {
    const progress = goal.targetValue > 0 ? (goal.currentValue / goal.targetValue) * 100 : 0;
    const progressColor = SCOPE_COLORS[goal.scope] || COLORS.darkBlue;
    return (
        <div className="bg-white p-6 rounded-xl shadow-lg border-l-4" style={{ borderColor: progressColor }}>
            <div className="flex justify-between items-start">
                <h3 className="text-lg font-bold text-gray-800 mb-2">{sanitizeString(goal.description)}</h3>
                <button onClick={() => onDelete(goal.id)} className="text-gray-400 hover:text-red-500" aria-label={`Remover meta: ${goal.description}`}>
                    <TrashIcon />
                </button>
            </div>
            <p className="text-sm font-semibold text-gray-500 mb-2">Meta para {goal.targetYear} (Base: {goal.baselineYear})</p>
            <p className="text-xs text-gray-500 mb-2">
                {goal.type === 'intensity' ? `Meta de Intensidade (${sanitizeString(goal.intensityMetric)})` : 'Meta de Redução Absoluta'}
            </p>
            <div className="text-gray-700 mb-4"><span className="font-bold">{goal.currentValue.toFixed(2)} {goal.unit}</span> de <span className="font-bold">{goal.targetValue.toFixed(2)} {goal.unit}</span></div>
            <div className="w-full bg-gray-200 rounded-full h-2.5"><div className="h-2.5 rounded-full" style={{ width: `${Math.min(progress, 100)}%`, backgroundColor: progressColor }}></div></div>
            <p className="text-right text-sm font-medium mt-1" style={{ color: progressColor }}>{Math.round(progress)}%</p>
        </div>
    );
};
// Melhorias de acessibilidade: focus trap, restore focus e fechar ao pressionar ESC
const Modal = ({ children, onClose, maxWidth = 'max-w-2xl', titleId }) => {
    const modalRef = useRef(null);
    const prevActiveElement = useRef(null);

    useEffect(() => {
        prevActiveElement.current = document.activeElement;
        const modalElement = modalRef.current;
        if (modalElement) {
            const focusableElements = modalElement.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
            const firstElement = focusableElements[0];
            const lastElement = focusableElements[focusableElements.length - 1];
            
            const handleKeyDown = (e) => {
                if (e.key === 'Tab') {
                    if (e.shiftKey) { 
                        if (document.activeElement === firstElement) {
                            lastElement.focus();
                            e.preventDefault();
                        }
                    } else { 
                        if (document.activeElement === lastElement) {
                            firstElement.focus();
                            e.preventDefault();
                        }
                    }
                } else if (e.key === 'Escape') {
                    onClose();
                }
            };
            
            modalElement.addEventListener('keydown', handleKeyDown);
            firstElement?.focus();
            return () => {
                modalElement.removeEventListener('keydown', handleKeyDown);
                prevActiveElement.current?.focus();
            };
        }
    }, [onClose]);

    return createPortal( 
        <div 
            className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4"
            onClick={onClose}
            aria-labelledby={titleId}
            role="dialog"
            aria-modal="true"
        >
            <div 
                ref={modalRef} 
                className={`bg-white rounded-xl shadow-2xl w-full ${maxWidth} max-h-[90vh] flex flex-col`}
                onClick={(e) => e.stopPropagation()}
            >
                {children}
            </div>
        </div>, 
        document.body 
    );
};

const LoadingSpinner = () => (
    <div className="flex h-screen w-full items-center justify-center bg-[#0A2F5B]">
        <style>{`
            @keyframes morph {
                0% { border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%; transform: rotate(0deg) scale(1); }
                50% { border-radius: 30% 60% 70% 40% / 50% 60% 30% 60%; transform: rotate(180deg) scale(0.95); }
                100% { border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%; transform: rotate(360deg) scale(1); }
            }
            @keyframes spin { 100% { transform: rotate(360deg); } }
        `}</style>
        <div className="relative w-48 h-48 flex items-center justify-center">
            <div className="absolute inset-0 border-4 border-[#2EC4B6] rounded-full opacity-50" style={{ animation: 'spin 2s linear infinite' }}></div>
            <div className="absolute inset-2 border-4 border-white rounded-full opacity-75" style={{ animation: 'spin 2.5s linear infinite reverse' }}></div>
            <div className="absolute inset-0 bg-white/10" style={{ animation: 'morph 8s ease-in-out infinite' }}></div>
            <div className="bg-white rounded-full p-2 shadow-lg">
                <img src="https://indiciumfin.github.io/indicium360/assets/images/indicium360-favicon.webp" alt="Indicium360 Favicon" className="h-20 w-20" />
            </div>
        </div>
    </div>
);

const Toast = ({ message, type, onClose }) => {
    const icon = type === 'success' ? <CheckCircleIcon /> : <XCircleIcon />;
    const bgColor = type === 'success' ? 'bg-green-50' : 'bg-red-50';
    const textColor = type === 'success' ? 'text-green-800' : 'text-red-800';
    const borderColor = type === 'success' ? 'border-green-400' : 'border-red-400';

    useEffect(() => {
        const timer = setTimeout(() => {
            onClose();
        }, 3000);
        return () => clearTimeout(timer);
    }, [onClose]);

    return (
        <div className={`fixed bottom-4 right-4 z-[100] flex items-center p-4 rounded-lg shadow-lg border-l-4 ${bgColor} ${textColor} ${borderColor}`} role="alert">
            <div className="flex-shrink-0">{icon}</div>
            <div className="ml-3 text-sm font-medium">{message}</div>
        </div>
    );
};


// --- MÓDULO 1: WIZARD DE ONBOARDING ---
const allGhGProtocolCategories = {
    'Escopo 1': {
        'Combustão Estacionária': true, 'Combustão Móvel': true, 'Emissões Fugitivas': false, 'Emissões de Processo': false,
    },
    'Escopo 2': {
        'Eletricidade Adquirida': true, 'Vapor, Aquecimento e Arrefecimento Adquiridos': false,
    },
    'Escopo 3': {
        '1. Bens e Serviços Adquiridos': false, '2. Bens de Capital': false, '3. Atividades Relacionadas a Combustível e Energia': false, '4. Transporte e Distribuição (Montante)': false, '5. Resíduos Gerados nas Operações': true, '6. Viagens de Negócios': true, '7. Deslocamento de Colaboradores': false, '8. Ativos Arrendados (Montante)': false, '9. Transporte e Distribuição (Jusante)': false, '10. Processamento de Produtos Vendidos': false, '11. Uso de Produtos Vendidos': false, '12. Tratamento de Fim de Vida de Produtos Vendidos': false, '13. Ativos Arrendados (Jusante)': false, '14. Franquias': false, '15. Investimentos': false,
    },
};

const OnboardingWizard = ({ onComplete }) => {
    const [step, setStep] = useState(1);
    const [facilityName, setFacilityName] = useState('');
    const [inventoryPeriod, setInventoryPeriod] = useState(new Date().getFullYear());
    const [selectedScopes, setSelectedScopes] = useState(allGhGProtocolCategories);

    const handleScopeChange = (scope, category) => {
        setSelectedScopes(prev => ({
            ...prev,
            [scope]: { ...prev[scope], [category]: !prev[scope][category] }
        }));
    };

    const handleFinish = () => {
        if (facilityName.trim()) {
            onComplete({ facilityName: sanitizeString(facilityName), inventoryPeriod, selectedScopes });
        }
    };
    
    const scope3Tooltip = "Escopo 3 inclui todas as outras emissões indiretas na cadeia de valor, como viagens de negócios, resíduos, e bens adquiridos.";

    return createPortal(
        <div className="fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center p-4" role="dialog" aria-modal="true" aria-labelledby="onboarding-title">
            <div className="bg-white rounded-xl shadow-2xl w-full max-w-4xl transform transition-all max-h-[95vh] flex flex-col">
                <div className="p-4 border-b flex justify-between">
                    {[1, 2, 3].map(s => (
                        <div key={s} className="flex-1 mx-2">
                            <div className={`h-2 rounded-full ${step >= s ? 'bg-[#2EC4B6]' : 'bg-gray-200'}`}></div>
                        </div>
                    ))}
                </div>

                {step === 1 && (
                    <div className="p-8 text-center">
                        <h2 id="onboarding-title" className="text-3xl font-bold text-gray-800 mb-4">Bem-vindo à Indicium360!</h2>
                        <p className="text-gray-600 mb-8">Vamos configurar o seu primeiro inventário de emissões de gases de efeito estufa em apenas alguns passos.</p>
                        <button onClick={() => setStep(2)} className="bg-[#0A2F5B] text-white font-bold py-3 px-8 rounded-full text-lg">Começar</button>
                    </div>
                )}
                {step === 2 && (
                    <div className="p-8">
                        <h2 className="text-2xl font-bold text-gray-800 mb-6">1. Fronteiras e Período</h2>
                        <div className="space-y-4">
                            <div>
                                <label htmlFor="facility-name" className="block text-sm font-medium text-gray-700 mb-1">Nome da sua Empresa ou Unidade Principal</label>
                                <input id="facility-name" type="text" value={facilityName} onChange={e => setFacilityName(e.target.value)} placeholder="Ex: Sede Principal, Fábrica de Lisboa" className="w-full p-3 rounded-lg border" required />
                            </div>
                            <div>
                                <label htmlFor="inventory-period" className="block text-sm font-medium text-gray-700 mb-1">Ano do Inventário</label>
                                <input id="inventory-period" type="number" value={inventoryPeriod} onChange={e => setInventoryPeriod(parseInt(e.target.value))} className="w-full p-3 rounded-lg border" required />
                            </div>
                        </div>
                        <div className="mt-8 flex justify-between">
                            <button onClick={() => setStep(1)} className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-full">Voltar</button>
                            <button onClick={() => setStep(3)} disabled={!facilityName.trim()} className="bg-[#0A2F5B] text-white font-bold py-2 px-4 rounded-full disabled:bg-gray-400">Próximo</button>
                        </div>
                    </div>
                )}
                {step === 3 && (
                    <>
                        <div className="p-8 border-b">
                            <h2 className="text-2xl font-bold text-gray-800">2. Seleção de Escopos (GHG Protocol)</h2>
                        </div>
                        <div className="p-8 overflow-y-auto">
                            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                                {Object.entries(selectedScopes).map(([scope, categories]) => (
                                    <div key={scope} className="space-y-3">
                                        <div className="flex items-center">
                                            <h3 className="font-bold text-xl text-gray-700 border-b-2 pb-2" style={{borderColor: SCOPE_COLORS[scope]}}>{scope}</h3>
                                            {scope === 'Escopo 3' && (
                                                <div className="relative group">
                                                    <QuestionMarkCircleIcon />
                                                    <div className="absolute left-1/2 -translate-x-1/2 bottom-full mb-2 w-64 p-2 text-sm text-gray-700 bg-white rounded-lg shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none">
                                                        {scope3Tooltip}
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                        <div className="space-y-2">
                                            {Object.entries(categories).map(([category, isSelected]) => (
                                                <label key={category} className="flex items-start space-x-3 p-2 rounded-lg hover:bg-gray-50">
                                                    <input type="checkbox" checked={isSelected} onChange={() => handleScopeChange(scope, category)} className="h-5 w-5 mt-0.5 rounded text-[#2EC4B6] focus:ring-[#2EC4B6] border-gray-300" />
                                                    <span className="text-gray-800">{category}</span>
                                                </label>
                                            ))}
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                        <div className="p-4 border-t mt-auto flex justify-between">
                            <button onClick={() => setStep(2)} className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-full">Voltar</button>
                            <button onClick={handleFinish} className="bg-[#2EC4B6] text-white font-bold py-2 px-4 rounded-full">Concluir Configuração</button>
                        </div>
                    </>
                )}
            </div>
        </div>,
        document.body
    );
};


// --- Modais da Aplicação ---
const AddDataModal = ({ onSave, onClose, facilities, scope, category, setToast }) => {
    const [data, setData] = useState({ 
        quantity: '', 
        unit: defaultUnits[category] || '', 
        date: new Date().toISOString().slice(0, 10), 
        facility: facilities[0]?.name || '' 
    });
    
    useEffect(() => {
        setData(prev => ({ ...prev, unit: defaultUnits[category] || '' }));
    }, [category]);
    
    const handleChange = (e) => { const { name, value } = e.target; setData(prev => ({ ...prev, [name]: value })); };
    const handleSubmit = (e) => { 
        e.preventDefault(); 
        const sanitizedData = {
            ...data,
            quantity: Number(data.quantity),
            facility: sanitizeString(data.facility),
            unit: sanitizeString(data.unit),
            scope: sanitizeString(data.scope),
            category: sanitizeString(data.category),
        };

        if (sanitizedData.quantity <= 0) {
            setToast({ message: "A quantidade deve ser um número positivo.", type: "error" });
            return;
        }

        onSave(sanitizedData); 
        onClose();
    };

    return (
        <Modal onClose={onClose} titleId="add-data-modal-title">
            <div className="p-6 border-b">
                <h3 id="add-data-modal-title" className="text-2xl font-bold text-gray-800">Adicionar Dado: {category}</h3>
            </div>
            <form onSubmit={handleSubmit} className="p-6 overflow-y-auto space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label htmlFor="facility-select" className="block text-sm font-medium text-gray-700 mb-1">Unidade / Filial</label>
                        <select id="facility-select" name="facility" value={data.facility} onChange={handleChange} className="w-full p-3 rounded-lg border" required>
                            {facilities.map(f => <option key={f.id}>{f.name}</option>)}
                        </select>
                    </div>
                    <div>
                        <div className="flex items-center space-x-2">
                             <label htmlFor="date-input" className="block text-sm font-medium text-gray-700 mb-1">Data</label>
                             <TooltipInfo text="A data em que a atividade de emissão ocorreu. Essencial para o cálculo da trajetória de emissões (GHG Protocol, Cap. 5, p. 35)" />
                        </div>
                        <input id="date-input" type="date" name="date" value={data.date} onChange={handleChange} className="w-full p-3 rounded-lg border" required />
                    </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                     <div>
                        <div className="flex items-center space-x-2">
                             <label htmlFor="quantity-input" className="block text-sm font-medium text-gray-700 mb-1">Quantidade</label>
                             <TooltipInfo text="A quantidade de dados de atividade (por exemplo, litros de combustível, kWh de eletricidade) usada para calcular as emissões. É a base para a quantificação das emissões (GHG Protocol, Cap. 6, p. 42)." />
                        </div>
                        <input id="quantity-input" type="number" name="quantity" value={data.quantity} onChange={handleChange} className="w-full p-3 rounded-lg border" required />
                     </div>
                    <div>
                        <div className="flex items-center space-x-2">
                            <label htmlFor="unit-input" className="block text-sm font-medium text-gray-700 mb-1">Unidade</label>
                            <TooltipInfo text="A unidade de medida para a quantidade de atividade. A escolha da unidade correta é crucial para aplicar o fator de emissão apropriado e garantir a precisão do cálculo (GHG Protocol, Cap. 6, p. 43)." />
                        </div>
                        <input id="unit-input" type="text" name="unit" value={data.unit} onChange={handleChange} className="w-full p-3 rounded-lg border" required />
                    </div>
                </div>
                <div className="p-4 border-t flex justify-end space-x-2">
                    <button onClick={onClose} type="button" className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-full">Cancelar</button>
                    <button type="submit" className="bg-[#0A2F5B] text-white font-bold py-2 px-4 rounded-full">Salvar</button>
                </div>
            </form>
        </Modal>
    );
};
const ManageFacilitiesModal = ({ facilities, onSave, onDelete, onClose, setToast }) => {
    const [newFacilityName, setNewFacilityName] = useState('');
    const handleSave = () => { 
        if(newFacilityName.trim()){ 
            onSave({ name: sanitizeString(newFacilityName.trim()) }); 
            setNewFacilityName('');
        }
    };
    return (
        <Modal onClose={onClose} maxWidth="max-w-md" titleId="manage-facilities-modal-title">
            <div className="p-6 border-b">
                <h3 id="manage-facilities-modal-title" className="text-2xl font-bold text-gray-800">Gerenciar Unidades</h3>
            </div>
            <div className="p-6 overflow-y-auto space-y-4">
                <div className="flex space-x-2">
                    <label htmlFor="new-facility" className="sr-only">Nome da nova unidade</label>
                    <input id="new-facility" type="text" value={newFacilityName} onChange={e => setNewFacilityName(e.target.value)} placeholder="Nome da nova unidade" className="w-full p-3 rounded-lg border" />
                    <button onClick={handleSave} className="bg-[#0A2F5B] text-white font-bold py-2 px-4 rounded-lg" aria-label="Adicionar nova unidade">Adicionar</button>
                </div>
                <div className="space-y-2">
                    {facilities.map(f => (
                        <div key={f.id} className="flex justify-between items-center bg-gray-100 p-3 rounded-lg">
                            <span className="font-medium">{sanitizeString(f.name)}</span>
                            <button onClick={() => onDelete(f.id)} className="text-gray-400 hover:text-red-500" aria-label={`Remover unidade ${f.name}`}>
                                <TrashIcon />
                            </button>
                        </div>
                    ))}
                </div>
            </div>
            <div className="p-4 border-t flex justify-end">
                <button onClick={onClose} type="button" className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-full">Fechar</button>
            </div>
        </Modal>
    );
};
const AddGoalModal = ({ onSave, onClose, setToast }) => {
    const [goal, setGoal] = useState({ description: '', scope: 'Todos', baselineYear: new Date().getFullYear(), targetYear: '2030', type: 'absolute', reductionPercentage: '10', intensityMetric: '' });
    const handleChange = (e) => { const { name, value } = e.target; setGoal(prev => ({ ...prev, [name]: value })); };
    const handleSubmit = (e) => { 
        e.preventDefault(); 
        const sanitizedGoal = {
            ...goal,
            description: sanitizeString(goal.description),
            intensityMetric: sanitizeString(goal.intensityMetric)
        };
        onSave(sanitizedGoal); 
        onClose();
    };
    return (
        <Modal onClose={onClose} titleId="add-goal-modal-title">
            <div className="p-6 border-b">
                <h3 id="add-goal-modal-title" className="text-2xl font-bold text-gray-800">Adicionar Nova Meta</h3>
            </div>
            <form onSubmit={handleSubmit} className="p-6 overflow-y-auto space-y-4">
                <div>
                    <label htmlFor="goal-description" className="block text-sm font-medium">Descrição</label>
                    <input id="goal-description" type="text" name="description" value={goal.description} onChange={handleChange} required className="w-full p-3 rounded-lg border" placeholder="Ex: Reduzir emissões da frota"/>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <div className="flex items-center space-x-2">
                             <label htmlFor="goal-type" className="block text-sm font-medium">Tipo de Meta</label>
                             <TooltipInfo text="Os dois tipos principais de metas são absolutas (reduzir uma quantidade específica de emissões) e de intensidade (reduzir emissões por unidade de métrica de negócio). (GHG Protocol, Cap. 11, p. 76)." />
                        </div>
                        <select id="goal-type" name="type" value={goal.type} onChange={handleChange} className="w-full p-3 rounded-lg border">
                            <option value="absolute">Redução Absoluta</option>
                            <option value="intensity">Redução por Intensidade</option>
                        </select>
                    </div>
                    <div>
                        <div className="flex items-center space-x-2">
                            <label htmlFor="goal-scope" className="block text-sm font-medium">Escopo</label>
                            <TooltipInfo text="A meta pode ser direcionada para um escopo específico ou para todos. O GHG Protocol incentiva a inclusão dos Escopos 1 e 2 no mínimo (GHG Protocol, Cap. 11, p. 78)." />
                        </div>
                        <select id="goal-scope" name="scope" value={goal.scope} onChange={handleChange} className="w-full p-3 rounded-lg border">
                            <option>Todos</option><option>Escopo 1</option><option>Escopo 2</option><option>Escopo 3</option>
                        </select>
                    </div>
                </div>
                {goal.type === 'intensity' && <div><label htmlFor="intensity-metric" className="block text-sm font-medium">Métrica de Intensidade</label><input id="intensity-metric" type="text" name="intensityMetric" value={goal.intensityMetric} onChange={handleChange} required={goal.type === 'intensity'} className="w-full p-3 rounded-lg border" placeholder="Ex: Toneladas produzidas, € Faturação"/></div>}
                <div className="grid grid-cols-3 gap-4">
                    <div>
                        <div className="flex items-center space-x-2">
                            <label htmlFor="baseline-year" className="block text-sm font-medium">Ano Base</label>
                            <TooltipInfo text="O ano de referência a partir do qual as reduções serão medidas. É fundamental para monitorar a consistência das emissões ao longo do tempo (GHG Protocol, Cap. 5, p. 35)." />
                        </div>
                        <input id="baseline-year" type="number" name="baselineYear" value={goal.baselineYear} onChange={handleChange} required className="w-full p-3 rounded-lg border" />
                    </div>
                    <div>
                        <div className="flex items-center space-x-2">
                            <label htmlFor="target-year" className="block text-sm font-medium">Ano Alvo</label>
                            <TooltipInfo text="O ano em que a meta de redução deve ser atingida. Define se a meta é de curto ou longo prazo (GHG Protocol, Cap. 11, p. 80)." />
                        </div>
                        <input id="target-year" type="number" name="targetYear" value={goal.targetYear} onChange={handleChange} required className="w-full p-3 rounded-lg border" />
                    </div>
                    <div>
                        <div className="flex items-center space-x-2">
                            <label htmlFor="reduction-percentage" className="block text-sm font-medium">Redução (%)</label>
                            <TooltipInfo text="A percentagem de redução de emissões que a empresa pretende alcançar em relação ao ano base. (GHG Protocol, Cap. 11, p. 76)." />
                        </div>
                        <input id="reduction-percentage" type="number" name="reductionPercentage" value={goal.reductionPercentage} onChange={handleChange} required className="w-full p-3 rounded-lg border" />
                    </div>
                </div>
            </form>
            <div className="p-4 border-t flex justify-end space-x-2">
                <button onClick={onClose} type="button" className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-full">Cancelar</button>
                <button type="submit" onClick={handleSubmit} className="bg-[#0A2F5B] text-white font-bold py-2 px-4 rounded-full">Salvar Meta</button>
            </div>
        </Modal>
    );
};

const AuditingModal = ({ onClose }) => (
    <Modal onClose={onClose} maxWidth="max-w-xl" titleId="auditing-title">
        <div className="p-6 border-b">
            <h3 id="auditing-title" className="text-2xl font-bold text-gray-800">Auditoria e Verificação</h3>
        </div>
        <div className="p-6 prose">
            <h4 className="text-xl font-bold text-gray-800 mt-4">Introdução à Verificação (GHG Protocol, Cap. 10, p. 68)</h4>
            <p>A verificação é um processo de avaliação independente para garantir a precisão e a integridade do seu inventário de GEE. É crucial para construir a confiança dos seus stakeholders e garantir a credibilidade dos seus relatórios.</p>
            <h4 className="text-xl font-bold text-gray-800 mt-4">Como Preparar para a Verificação (GHG Protocol, Cap. 10, p. 74)</h4>
            <p>Para uma verificação bem-sucedida, a documentação é essencial. A sua plataforma foi concebida para criar uma trilha de auditoria completa, mas é sua responsabilidade:</p>
            <ul className="list-disc list-inside">
                <li>Manter registos detalhados dos dados de atividade, fatores de emissão e cálculos.</li>
                <li>Documentar quaisquer alterações na metodologia ou nos limites da empresa.</li>
                <li>Garantir que a política de recálculo do ano base é aplicada de forma consistente.</li>
            </ul>
            <p className="mt-4">Neste módulo futuro, poderá:</p>
            <ul className="list-disc list-inside">
                <li>**Gerir um Plano de Qualidade:** Defina procedimentos de controlo e revisão de dados.</li>
                <li>**Agendar Verificações:** Marque auditorias internas ou com terceiros para validar seus dados.</li>
                <li>**Documentar Discrepâncias:** Registre e justifique quaisquer erros materiais ou incertezas, conforme o Capítulo 10.</li>
            </ul>
        </div>
        <div className="p-4 border-t flex justify-end">
            <button onClick={onClose} type="button" className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-full">Fechar</button>
        </div>
    </Modal>
);

const PrivateReportModal = ({ onClose, user }) => (
    <Modal onClose={onClose} maxWidth="max-w-xl" titleId="private-report-title">
        <div className="p-6 border-b">
            <h3 id="private-report-title" className="text-2xl font-bold text-gray-800">Relatório Confidencial</h3>
        </div>
        <div className="p-6">
            <p className="mb-4">
                Este é um relatório confidencial, acessível apenas para utilizadores com o papel 'admin'.
            </p>
            <p className="font-bold">Detalhes do Utilizador:</p>
            <ul className="list-disc list-inside ml-4">
                <li>ID: {user.uid}</li>
                <li>Email: {user.email}</li>
                <li>Papel: {user.role}</li>
            </ul>
        </div>
        <div className="p-4 border-t flex justify-end">
            <button onClick={onClose} type="button" className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-full">Fechar</button>
        </div>
    </Modal>
);

const ImportCsvModal = ({ onSave, onClose, setToast }) => {
    const [file, setFile] = useState(null);
    const [error, setError] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [previewData, setPreviewData] = useState(null);

    const handleFileChange = (e) => {
        setError('');
        const selectedFile = e.target.files[0];
        if (selectedFile && selectedFile.type === 'text/csv') {
            setFile(selectedFile);
            setPreviewData(null); 
            window.Papa.parse(selectedFile, {
                header: true,
                preview: 5, 
                skipEmptyLines: true,
                complete: (results) => {
                    const requiredHeaders = ['date', 'scope', 'category', 'facility', 'quantity', 'unit'];
                    const headers = results.meta.fields;
                    const hasAllHeaders = requiredHeaders.every(h => headers.includes(h));

                    if (!hasAllHeaders) {
                        setError(`Cabeçalhos em falta. O ficheiro deve conter: ${requiredHeaders.join(', ')}`);
                        return;
                    }

                    const dataWithEmissions = results.data.map(row => {
                        const emissionData = calculateEmissions(row.category, row.unit, Number(row.quantity), []); 
                        return { ...row, emissions_kgCO2e: emissionData.emissions_kgCO2e };
                    });

                    setPreviewData(dataWithEmissions);
                },
                error: (err) => {
                    setError(`Erro ao analisar o ficheiro: ${err.message}`);
                }
            });
        } else {
            setError('Por favor, selecione um ficheiro CSV válido.');
        }
    };

    const handleImport = () => {
        if (!file) {
            setError('Nenhum ficheiro selecionado.');
            return;
        }
        setIsLoading(true);
        window.Papa.parse(file, {
            header: true,
            skipEmptyLines: true,
            complete: (results) => {
                const requiredHeaders = ['date', 'scope', 'category', 'facility', 'quantity', 'unit'];
                const headers = results.meta.fields;
                const hasAllHeaders = requiredHeaders.every(h => headers.includes(h));

                if (!hasAllHeaders) {
                    setError(`Cabeçalhos em falta. O ficheiro deve conter: ${requiredHeaders.join(', ')}`);
                    setIsLoading(false);
                    return;
                }
                
                const dataToSave = results.data.map(row => ({
                    date: sanitizeString(row.date),
                    scope: sanitizeString(row.scope),
                    category: sanitizeString(row.category),
                    facility: sanitizeString(row.facility),
                    quantity: Number(row.quantity),
                    unit: sanitizeString(row.unit),
                }));

                onSave(dataToSave);
                setIsLoading(false);
                onClose();
            },
            error: (err) => {
                setError(`Erro ao analisar o ficheiro: ${err.message}`);
                setIsLoading(false);
            }
        });
    };
    
    const handleDownloadTemplate = () => {
        const csvContent = "data:text/csv;charset=utf-8," 
            + "date,scope,category,facility,quantity,unit\n"
            + "2024-01-15,Escopo 1,Combustão Móvel,Sede Principal,1500,litros\n";
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "template_importacao.csv");
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    return (
        <Modal onClose={onClose} maxWidth="max-w-lg" titleId="import-csv-modal-title">
            <div className="p-6 border-b">
                <h3 id="import-csv-modal-title" className="text-2xl font-bold text-gray-800">Importar Dados via CSV</h3>
            </div>
            <div className="p-6 overflow-y-auto space-y-4">
                <p className="text-gray-600">Faça o upload de múltiplos registos de uma só vez. Siga os seguintes passos:</p>
                <ol className="list-decimal list-inside space-y-2 text-gray-600">
                    <li>Faça o download do nosso template CSV.</li>
                    <li>Preencha a planilha com os seus dados de atividade.</li>
                    <li>Faça o upload do ficheiro preenchido abaixo.</li>
                </ol>
                <button onClick={handleDownloadTemplate} className="w-full flex items-center justify-center bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-lg hover:bg-gray-300">
                    <DownloadIcon />
                    Download do Template
                </button>
                <div>
                    <label htmlFor="csv-file-input" className="block text-sm font-medium text-gray-700 mb-1">Ficheiro CSV</label>
                    <input id="csv-file-input" type="file" accept=".csv" onChange={handleFileChange} className="w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-cyan-50 file:text-cyan-700 hover:file:bg-cyan-100"/>
                </div>
                {error && <p className="text-red-500 text-sm" role="alert">{error}</p>}
                
                {/* Pré-visualização do CSV */}
                {previewData && (
                    <div className="mt-4 p-4 border rounded-lg bg-gray-50">
                        <h4 className="font-bold text-gray-800 mb-2">Pré-visualização (primeiras 5 linhas)</h4>
                        <div className="overflow-x-auto">
                            <table className="w-full text-left table-auto">
                                <thead>
                                    <tr className="border-b text-gray-600">
                                        <th scope="col" className="p-2">Data</th>
                                        <th scope="col" className="p-2">Escopo</th>
                                        <th scope="col" className="p-2">Categoria</th>
                                        <th scope="col" className="p-2">Unidade</th>
                                        <th scope="col" className="p-2">Qtd</th>
                                        <th scope="col" className="p-2">Unidade</th>
                                        <th scope="col" className="p-2">Emissões</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {previewData.map((row, index) => (
                                        <tr key={index} className="border-b">
                                            <td className="p-2 text-sm">{sanitizeString(row.date)}</td>
                                            <td className="p-2 text-sm">{sanitizeString(row.scope)}</td>
                                            <td className="p-2 text-sm">{sanitizeString(row.category)}</td>
                                            <td className="p-2 text-sm">{sanitizeString(row.facility)}</td>
                                            <td className="p-2 text-sm">{row.quantity}</td>
                                            <td className="p-2 text-sm">{sanitizeString(row.unit)}</td>
                                            <td className="p-2 text-sm">{row.emissions_kgCO2e?.toFixed(2)}</td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                        <p className="text-xs text-gray-500 mt-2">Valores de emissão são uma estimativa baseada nos fatores de emissão ativos.</p>
                    </div>
                )}
            </div>
            <div className="p-4 border-t flex justify-end space-x-2">
                <button onClick={onClose} type="button" className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-full">Cancelar</button>
                <button onClick={handleImport} disabled={!file || isLoading} className="bg-[#0A2F5B] text-white font-bold py-2 px-4 rounded-full disabled:bg-gray-400">
                    {isLoading ? 'A Importar...' : 'Importar'}
                </button>
            </div>
        </Modal>
    );
};

const GhgInfoModal = ({ onClose }) => (
    <Modal onClose={onClose} maxWidth="max-w-3xl" titleId="ghg-info-modal-title">
        <div className="p-6 border-b">
            <h3 id="ghg-info-modal-title" className="text-2xl font-bold text-gray-800">Sobre os Escopos (GHG Protocol)</h3>
        </div>
        <div className="p-6 overflow-y-auto prose max-w-none">
            <p className="text-gray-700">O <strong>GHG Protocol Corporate Accounting and Reporting Standard</strong> (documento do Protocolo GEE, Páginas 24-25) define os três escopos de emissões:</p>
            <h4 className="text-xl font-bold text-gray-800 mt-4">Escopo 1: Emissões Diretas de GEE</h4>
            <p className="text-gray-700">Estas são emissões de fontes que a empresa possui ou controla (documento do Protocolo GEE, Página 27). No seu inventário, isto inclui:</p>
            <ul className="list-disc list-inside">
                <li><strong>Combustão Estacionária:</strong> Emissões de combustíveis em caldeiras, fornos, etc. (Página 27).</li>
                <li><strong>Combustão Móvel:</strong> Emissões de veículos da empresa (Página 27).</li>
                <li><strong>Emissões Fugitivas:</strong> Fugas de gases de sistemas de refrigeração e ar-condicionado (Página 27).</li>
                <li><strong>Emissões de Processo:</strong> Emissões de processos industriais e químicos (Página 27).</li>
            </ul>
            <h4 className="text-xl font-bold text-gray-800 mt-4">Escopo 2: Emissões Indiretas de GEE de Eletricidade Adquirida</h4>
            <p className="text-gray-700">Estas são as emissões da geração de eletricidade que a empresa compra e consome (documento do Protocolo GEE, Página 27). As emissões ocorrem fisicamente no local onde a eletricidade é gerada, mas são contabilizadas por você.</p>
            <ul className="list-disc list-inside">
                <li><strong>Eletricidade Adquirida:</strong> Consumo de eletricidade da rede (Página 27).</li>
                <li><strong>Vapor, Aquecimento e Arrefecimento Adquiridos:</strong> Consumo de energia térmica comprada de terceiros (Página 27).</li>
            </ul>
            <h4 className="text-xl font-bold text-gray-800 mt-4">Escopo 3: Outras Emissões Indiretas de GEE</h4>
            <p className="text-gray-700">Esta é uma categoria opcional que abrange todas as outras emissões indiretas que ocorrem na cadeia de valor da empresa, mas que são de fontes não possuídas ou controladas por ela (documento do Protocolo GEE, Página 27). No seu inventário, isto pode incluir:</p>
            <ul className="list-disc list-inside">
                <li><strong>Viagens de Negócios:</strong> Emissões de voos, comboios, etc. (Página 29).</li>
                <li><strong>Resíduos Gerados nas Operações:</strong> Emissões do tratamento de resíduos (Página 29).</li>
                <li><strong>Bens e Serviços Adquiridos:</strong> Emissões da produção dos materiais e serviços comprados (Página 29).</li>
            </ul>
        </div>
        <div className="p-4 border-t flex justify-end">
            <button onClick={onClose} type="button" className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-full">Fechar</button>
        </div>
    </Modal>
);

// --- Componente da Barra Lateral ---
const Sidebar = ({ activePage, setActivePage, isOpen, setIsOpen, user, onSignOut }) => {
    const navItems = [
        { id: 'dashboard', label: 'Painel de Controle', icon: <DashboardIcon /> }, 
        { id: 'inventory', label: 'Inventário de Carbono', icon: <DatabaseIcon /> },
        { id: 'strategy', label: 'Estratégia Climática', icon: <StrategyIcon /> }, 
        { id: 'risk', label: 'Risco & Resiliência', icon: <RiskIcon /> },
        { id: 'supplychain', label: 'Cadeia de Valor', icon: <ChainIcon /> }, 
        { id: 'reporting', label: 'Divulgação', icon: <DocumentReportIcon /> },
        { id: 'auditing', label: 'Auditoria e Verificação', icon: <AuditIcon />, isNew: true },
        { id: 'market', label: 'Mercados de Carbono', icon: <MarketIcon />, isNew: false }, 
        { id: 'settings', label: 'Configurações', icon: <SettingsIcon /> },
    ];
    return (
        <>
            <div className={`fixed inset-0 bg-black bg-opacity-50 z-30 md:hidden transition-opacity ${isOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'}`} onClick={() => setIsOpen(false)}></div>
            <aside className={`fixed top-0 left-0 w-64 bg-[#0A2F5B] text-white flex flex-col h-full z-40 transform transition-transform md:relative md:translate-x-0 ${isOpen ? 'translate-x-0' : '-translate-x-full'}`}>
                <div className="p-6 flex items-center justify-center border-b border-white/10 h-20">
                    <div className="bg-white p-2 rounded-md">
                        <img src="https://indiciumfin.github.io/indicium360/assets/images/indicium360-logo.webp" alt="Indicium360 Logo" className="h-8" loading="lazy"/>
                    </div>
                    <button onClick={() => setIsOpen(false)} className="md:hidden text-white absolute right-4 top-6" aria-label="Fechar menu de navegação">
                        <CloseIcon />
                    </button>
                </div>
                <nav className="flex-1 p-4 space-y-2 overflow-y-auto">{navItems.map(item => (<a key={item.id} href="#" onClick={(e) => { e.preventDefault(); setActivePage(item.id); setIsOpen(false); }} className={`flex items-center justify-between p-3 rounded-lg transition-colors ${activePage === item.id ? 'bg-[#2EC4B6] text-white' : 'hover:bg-white/10'}`} aria-current={activePage === item.id ? 'page' : false}>
                    <div className="flex items-center">{item.icon}{item.label}</div>
                    {item.isNew && <span className="text-xs bg-cyan-500 text-white font-semibold px-2 py-0.5 rounded-full">NOVO</span>}
                </a>))}</nav>
                <div className="p-4 border-t border-white/10">
                    <div className="flex items-center mb-2">
                        {user?.isAnonymous ? <GuestIcon className="h-8 w-8 text-white"/> : <UserIcon className="h-8 w-8 text-white" />}
                        <div className="ml-3">
                            <p className="text-sm font-medium">{user?.email || 'Ambiente Homologado'}</p>
                            <p className="text-xs text-gray-300">Papel: {user?.role || 'guest'}</p>
                        </div>
                    </div>
                    <button onClick={onSignOut} className="w-full bg-red-500 text-white font-bold py-2 px-4 rounded-full hover:bg-red-600 transition-colors">
                        Sair
                    </button>
                </div>
            </aside>
        </>
    );
};

// --- Módulos (Páginas) ---
const DashboardPage = ({ activityData, goals, alerts }) => {
    const { totalEmissionsTon, scopeData, monthlyData, categoryHotspots, goalTrajectoryData } = useMemo(() => {
        const totalEmissionsTon = activityData.reduce((sum, item) => sum + (item.emissions_kgCO2e || 0), 0) / 1000;

        const scopeData = [
            { name: 'Escopo 1', value: 0 }, { name: 'Escopo 2', value: 0 }, { name: 'Escopo 3', value: 0 },
        ];
        const monthlyEmissions = {};
        const categoryTotals = {};

        activityData.forEach(item => {
            const scopeIndex = parseInt(item.scope.split(' ')[1]) - 1;
            if (scopeIndex >= 0 && scopeIndex < 3) {
                scopeData[scopeIndex].value += (item.emissions_kgCO2e || 0);
            }
            const month = new Date(item.date).getMonth();
            monthlyEmissions[month] = (monthlyEmissions[month] || 0) + (item.emissions_kgCO2e || 0);
            categoryTotals[item.category] = (categoryTotals[item.category] || 0) + (item.emissions_kgCO2e || 0);
        });

        scopeData.forEach(d => d.value /= 1000);

        const monthNames = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"];
        const monthlyData = monthNames.map((month, index) => ({
            name: month,
            Emissões: (monthlyEmissions[index] || 0) / 1000
        }));
        
        const categoryHotspots = Object.entries(categoryTotals)
            .map(([name, value]) => ({ name, value: value / 1000 }))
            .sort((a, b) => b.value - a.value);

        let goalTrajectoryData = [];
        if (goals && goals.length > 0) {
            const primaryGoal = goals.sort((a,b) => a.targetYear - b.targetYear)[0];
            const startYear = parseInt(primaryGoal.baselineYear);
            const endYear = parseInt(primaryGoal.targetYear);
            const startValue = primaryGoal.baselineValue;
            const endValue = primaryGoal.targetValue;
            
            const currentYear = new Date().getFullYear();
            if(currentYear >= startYear && currentYear <= endYear) {
                const totalMonths = (endYear - startYear) * 12;
                const monthlyReduction = (startValue - endValue) / totalMonths;
                
                goalTrajectoryData = monthNames.map((month, index) => {
                    const monthsElapsed = (currentYear - startYear) * 12 + index;
                    const target = startValue - (monthsElapsed * monthlyReduction);
                    return { ...monthlyData[index], Meta: target > 0 ? target : 0 };
                });
            }
        }

        return { totalEmissionsTon, scopeData, monthlyData, categoryHotspots, goalTrajectoryData: goalTrajectoryData.length > 0 ? goalTrajectoryData : monthlyData };
    }, [activityData, goals]);

    const kpiInfo = {
        'Emissões Totais (YTD)': 'O total de emissões de GEE (Gases de Efeito Estufa) da empresa acumulado no ano, seguindo a metodologia do GHG Protocol (GHG Protocol, Cap. 2, p. 11).',
        'Emissões Escopo 1': 'Emissões diretas de fontes que a empresa possui ou controla (GHG Protocol, Cap. 4, p. 27).',
        'Emissões Escopo 2': 'Emissões indiretas da geração de eletricidade, vapor, aquecimento e arrefecimento adquiridos e consumidos (GHG Protocol, Cap. 4, p. 27).',
        'Emissões Escopo 3': 'Outras emissões indiretas na cadeia de valor, como viagens, bens adquiridos e resíduos (GHG Protocol, Cap. 4, p. 27).',
        'Trajetória de Emissões vs. Meta Principal (tCO₂e)': 'Acompanha o progresso das emissões da empresa em relação a uma meta de redução estabelecida, permitindo visualizar a conformidade com a estratégia climática (GHG Protocol, Cap. 11, p. 76).',
        'Emissões por Escopo': 'A distribuição percentual das emissões da empresa entre os três escopos, fornecendo uma visão clara dos principais focos de emissão (GHG Protocol, Cap. 9, p. 63).',
        'Hotspots de Emissão (Análise de Pareto)': 'Identifica as categorias de emissão mais significativas (os "hotspots") que contribuem para a maior parte das emissões totais da empresa, auxiliando na priorização de esforços de redução (GHG Protocol, Cap. 6, p. 41).',
    };

    return (
        <div className="space-y-8">
            <header>
                <h1 className="text-2xl md:text-3xl font-bold text-gray-800">Painel de Controle de Carbono</h1>
            </header>
            
            {alerts.length > 0 && (
                <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg" role="alert">
                    <p className="font-bold">Alerta de Emissões</p>
                    {alerts.map((alert, index) => <p key={index}>{alert}</p>)}
                </div>
            )}

            <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-6">
                <KpiCard title="Emissões Totais (YTD)" value={totalEmissionsTon.toLocaleString('pt-BR', {minimumFractionDigits: 2, maximumFractionDigits: 2})} unit="tCO₂e" infoText={kpiInfo['Emissões Totais (YTD)']} />
                <KpiCard title="Emissões Escopo 1" value={scopeData[0].value.toLocaleString('pt-BR', {minimumFractionDigits: 2, maximumFractionDigits: 2})} unit="tCO₂e" infoText={kpiInfo['Emissões Escopo 1']} />
                <KpiCard title="Emissões Escopo 2" value={scopeData[1].value.toLocaleString('pt-BR', {minimumFractionDigits: 2, maximumFractionDigits: 2})} unit="tCO₂e" infoText={kpiInfo['Emissões Escopo 2']} />
                <KpiCard title="Emissões Escopo 3" value={scopeData[2].value.toLocaleString('pt-BR', {minimumFractionDigits: 2, maximumFractionDigits: 2})} unit="tCO₂e" infoText={kpiInfo['Emissões Escopo 3']} />
            </div>
            
             <div className="bg-white p-6 rounded-xl shadow-lg">
                <div className="flex items-center space-x-2 mb-4">
                    <h3 className="text-lg font-semibold text-gray-800">Trajetória de Emissões vs. Meta Principal (tCO₂e)</h3>
                    <TooltipInfo text={kpiInfo['Trajetória de Emissões vs. Meta Principal (tCO₂e)']} />
                </div>
                <ResponsiveContainer width="100%" height={300}>
                    <LineChart data={goalTrajectoryData} aria-label="Gráfico de linha mostrando a trajetória das emissões e a meta de redução.">
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip formatter={(value) => `${value.toFixed(2)} tCO₂e`} />
                        <Legend />
                        <Line type="monotone" dataKey="Emissões" stroke={COLORS.darkBlue} strokeWidth={2} />
                        {goals.length > 0 && <Line type="monotone" dataKey="Meta" stroke={COLORS.orange} strokeDasharray="5 5" />}
                    </LineChart>
                </ResponsiveContainer>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div className="lg:col-span-1 bg-white p-6 rounded-xl shadow-lg">
                    <div className="flex items-center space-x-2 mb-4">
                        <h3 className="text-lg font-semibold text-gray-800">Emissões por Escopo</h3>
                        <TooltipInfo text={kpiInfo['Emissões por Escopo']} />
                    </div>
                     {/* Tabela de dados alternativa para leitores de tela */}
                    <div className="sr-only" role="table" aria-label="Tabela de dados do gráfico de pizza de emissões por escopo">
                        <div role="rowgroup">
                            <div role="row">
                                <span role="columnheader">Escopo</span>
                                <span role="columnheader">Emissões em toneladas de CO₂e</span>
                            </div>
                        </div>
                        <div role="rowgroup">
                            {scopeData.map((d, i) => (
                                <div role="row" key={i}>
                                    <span role="cell">{d.name}</span>
                                    <span role="cell">{d.value.toFixed(2)}</span>
                                </div>
                            ))}
                        </div>
                    </div>
                    <ResponsiveContainer width="100%" height={300}>
                         <PieChart aria-hidden="true">
                            <Pie data={scopeData} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={100} label>
                                {scopeData.map((entry, index) => <Cell key={`cell-${index}`} fill={PIE_COLORS[index % PIE_COLORS.length]} />)}
                            </Pie>
                            <Tooltip formatter={(value) => `${value.toFixed(2)} tCO₂e`} />
                            <Legend />
                        </PieChart>
                    </ResponsiveContainer>
                </div>
                <div className="lg:col-span-2 bg-white p-6 rounded-xl shadow-lg">
                    <div className="flex items-center space-x-2 mb-4">
                        <h3 className="text-lg font-semibold text-gray-800">Hotspots de Emissão (Análise de Pareto)</h3>
                        <TooltipInfo text={kpiInfo['Hotspots de Emissão (Análise de Pareto)']} />
                    </div>
                    <div className="space-y-4 max-h-[300px] overflow-y-auto pr-4">
                        {categoryHotspots.length > 0 ? categoryHotspots.map((item, index) => (
                            <div key={index}>
                                <div className="flex justify-between mb-1">
                                    <span className="text-base font-medium text-gray-700">{item.name}</span>
                                    <span className="text-sm font-medium text-gray-700">{item.value.toFixed(2)} tCO₂e</span>
                                </div>
                                <div className="w-full bg-gray-200 rounded-full h-2.5">
                                    <div className="bg-cyan-600 h-2.5 rounded-full" style={{ width: `${(item.value / categoryHotspots[0].value) * 100}%` }}></div>
                                </div>
                            </div>
                        )) : <p className="text-center text-gray-500 py-10">Não há dados suficientes para identificar hotspots.</p>}
                    </div>
                </div>
            </div>
        </div>
    );
};
const InventoryPage = ({ activityData, onAddClick, onDelete, facilities, settings, onImportClick, loadMoreData, lastDoc, hasMoreData, onGhgInfoClick }) => {
    const [activeTab, setActiveTab] = useState('Escopo 1');
    const openModal = (category, scope) => { onAddClick(true, { category, scope }); };
    
    const categoryDescriptions = {
        'Combustão Estacionária': 'Gás natural, diesel, etc., em caldeiras e fornos.',
        'Combustão Móvel': 'Combustível consumido pela frota de veículos da empresa.',
        'Emissões Fugitivas': 'Libertações de gases de equipamentos de refrigeração, ar condicionado, etc.',
        'Emissões de Processo': 'Emissões de processos industriais e químicos.',
        'Eletricidade Adquirida': 'Consumo de eletricidade da rede.',
        'Vapor, Aquecimento e Arrefecimento Adquiridos': 'Consumo de energia térmica comprada de terceiros.',
        '1. Bens e Serviços Adquiridos': 'Emissões da produção de bens e serviços comprados pela empresa.',
        '2. Bens de Capital': 'Emissões da produção de bens de capital (máquinas, edifícios) comprados.',
        '3. Atividades Relacionadas a Combustível e Energia': 'Emissões de extração, produção e transporte de combustíveis e energia.',
        '4. Transporte e Distribuição (Montante)': 'Transporte de produtos de fornecedores para a empresa.',
        '5. Resíduos Gerados nas Operações': 'Emissões do tratamento de resíduos gerados pela empresa.',
        '6. Viagens de Negócios': 'Emissões de viagens de funcionários para fins de negócio.',
        '7. Deslocamento de Colaboradores': 'Emissões do transporte diário dos funcionários de casa para o trabalho.',
        '8. Ativos Arrendados (Montante)': 'Operação de ativos arrendados pela empresa (não incluídos no E1/E2).',
        '9. Transporte e Distribuição (Jusante)': 'Transporte e distribuição de produtos vendidos a consumidores.',
        '10. Processamento de Produtos Vendidos': 'Emissões do processamento de produtos intermediários vendidos.',
        '11. Uso de Produtos Vendidos': 'Emissões geradas pelo uso de produtos e serviços vendidos pela empresa.',
        '12. Tratamento de Fim de Vida de Produtos Vendidos': 'Emissões do tratamento de produtos vendidos no final da sua vida útil.',
        '13. Ativos Arrendados (Jusante)': 'Operação de ativos que a empresa possui e arrenda a terceiros.',
        '14. Franquias': 'Emissões de operações de franquias.',
        '15. Investimentos': 'Emissões associadas aos investimentos da empresa.',
    };
    
    const categoryInfo = {
        'Combustão Estacionária': 'Refere-se à queima de combustíveis em equipamentos fixos, como caldeiras e fornos, para gerar calor ou energia (GHG Protocol, Cap. 4, p. 27).',
        'Combustão Móvel': 'Emissões de combustíveis em veículos pertencentes ou controlados pela empresa (GHG Protocol, Cap. 4, p. 27).',
        'Emissões Fugitivas': 'Libertações não intencionais de gases de equipamentos e sistemas, como vazamentos de refrigerantes (GHG Protocol, Cap. 4, p. 27).',
        'Emissões de Processo': 'Emissões geradas por processos industriais ou químicos, como a produção de cimento ou alumínio (GHG Protocol, Cap. 4, p. 27).',
        'Eletricidade Adquirida': 'Emissões indiretas da geração de eletricidade comprada e consumida pela empresa (GHG Protocol, Cap. 4, p. 27).',
        'Vapor, Aquecimento e Arrefecimento Adquiridos': 'Emissões indiretas da compra de energia térmica para consumo próprio (GHG Protocol, Cap. 4, p. 27).',
        '1. Bens e Serviços Adquiridos': 'Emissões na cadeia de valor de bens e serviços comprados pela empresa (GHG Protocol, Cap. 4, p. 29).',
        '2. Bens de Capital': 'Emissões da produção de bens de capital, como edifícios e maquinário (GHG Protocol, Cap. 4, p. 29).',
        '3. Atividades Relacionadas a Combustível e Energia': 'Emissões de extração, produção e transporte de combustíveis e energia adquiridos (GHG Protocol, Cap. 4, p. 29).',
        '4. Transporte e Distribuição (Montante)': 'Transporte de produtos de fornecedores para a empresa (GHG Protocol, Cap. 4, p. 29).',
        '5. Resíduos Gerados nas Operações': 'Emissões do tratamento de resíduos da empresa, como aterros sanitários e incineração (GHG Protocol, Cap. 4, p. 29).',
        '6. Viagens de Negócios': 'Emissões de voos, comboios, etc. (GHG Protocol, Cap. 4, p. 29).',
        '7. Deslocamento de Colaboradores': 'Emissões do transporte diário dos colaboradores de casa para o trabalho (GHG Protocol, Cap. 4, p. 29).',
        '8. Ativos Arrendados (Montante)': 'Operação de ativos arrendados pela empresa (GHG Protocol, Cap. 4, p. 29).',
        '9. Transporte e Distribuição (Jusante)': 'Transporte e distribuição de produtos vendidos a consumidores. (GHG Protocol, Cap. 4, p. 29).',
        '10. Processamento de Produtos Vendidos': 'Emissões do processamento de produtos intermediários vendidos. (GHG Protocol, Cap. 4, p. 29).',
        '11. Uso de Produtos Vendidos': 'Emissões geradas pelo uso de produtos e serviços vendidos pela empresa. (GHG Protocol, Cap. 4, p. 29).',
        '12. Tratamento de Fim de Vida de Produtos Vendidos': 'Emissões do tratamento de produtos vendidos no final da sua vida útil. (GHG Protocol, Cap. 4, p. 29).',
        '13. Ativos Arrendados (Jusante)': 'Operação de ativos que a empresa possui e arrenda a terceiros. (GHG Protocol, Cap. 4, p. 29).',
        '14. Franquias': 'Emissões de operações de franquias. (GHG Protocol, Cap. 4, p. 29).',
        '15. Investimentos': 'Emissões associadas aos investimentos da empresa. (GHG Protocol, Cap. 4, p. 29).',
    };

    const renderCategory = (category, scope, isActive) => (
        <div key={category} className={`bg-gray-50 p-4 rounded-lg flex flex-col md:flex-row justify-between md:items-center ${!isActive && 'opacity-50'}`}>
            <div className="mb-4 md:mb-0 flex items-center space-x-2">
                <h4 className="font-bold">{category}</h4>
                <TooltipInfo text={categoryInfo[category]}/>
            </div>
            <button 
                onClick={() => isActive && openModal(category, scope)} 
                disabled={!isActive}
                title={!isActive ? "Ative esta categoria nas Configurações para adicionar dados" : "Adicionar Dado de Atividade"}
                aria-label={`Adicionar dado para a categoria ${category}`}
                className="bg-[#0A2F5B] text-white font-bold py-2 px-4 rounded-lg text-sm disabled:bg-gray-400 disabled:cursor-not-allowed w-full md:w-auto"
            >
                Adicionar Dado
            </button>
        </div>
    );
    
    const dataByScope = activityData.filter(d => d.scope === activeTab);

    return (
        <div>
            <header className="mb-8 flex flex-col md:flex-row justify-between md:items-center">
                <div className="mb-4 md:mb-0">
                    <h1 className="text-2xl md:text-3xl font-bold text-gray-800">Inventário de Carbono</h1>
                    <p className="text-gray-500 mt-1">Registe e gira os dados de atividade para os Escopos 1, 2 e 3.</p>
                </div>
                <div className="flex space-x-2">
                    <button onClick={onGhgInfoClick} aria-label="Informações sobre os escopos do GHG Protocol" className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-lg flex items-center justify-center">
                        <BookOpenIcon />
                    </button>
                    <button onClick={onImportClick} aria-label="Importar via CSV" className="bg-[#2EC4B6] text-white font-bold py-2 px-4 rounded-lg flex items-center justify-center w-full md:w-auto">Importar via CSV</button>
                </div>
            </header>
            <div className="border-b border-gray-200 mb-6">
                <nav className="-mb-px flex space-x-4 md:space-x-8 overflow-x-auto" aria-label="Tabs">
                    {Object.keys(allGhGProtocolCategories).map(tab => (<button key={tab} onClick={() => setActiveTab(tab)} className={`${activeTab === tab ? 'border-[#0A2F5B] text-[#0A2F5B]' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'} whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}>{tab}</button>))}
                </nav>
            </div>
            
            <div className="space-y-4">
                {Object.keys(allGhGProtocolCategories[activeTab]).map(category => {
                    const isActive = settings?.selectedScopes?.[activeTab]?.[category] || false;
                    return renderCategory(category, activeTab, isActive);
                })}
            </div>
            
            <div className="bg-white p-6 rounded-xl shadow-lg mt-8">
                <h3 className="text-xl font-bold text-gray-800 mb-4">Dados Registados para {activeTab}</h3>
                <div className="overflow-x-auto">
                    <table className="min-w-full text-left hidden md:table" role="table">
                        <thead>
                            <tr className="border-b">
                                <th scope="col" className="p-4">Data</th>
                                <th scope="col" className="p-4">Categoria</th>
                                <th scope="col" className="p-4">Unidade</th>
                                <th scope="col" className="p-4">Quantidade</th>
                                <th scope="col" className="p-4">Emissões (kgCO₂e)</th>
                                <th scope="col" className="p-4">Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            {dataByScope.length > 0 ? dataByScope.map(data => (
                                <tr key={data.id} className="border-b hover:bg-gray-50">
                                    <td className="p-4 text-gray-600">{sanitizeString(data.date)}</td>
                                    <td className="p-4 font-medium text-gray-800">{sanitizeString(data.category)}</td>
                                    <td className="p-4 text-gray-600">{sanitizeString(data.facility)}</td>
                                    <td className="p-4 text-gray-800">{data.quantity.toLocaleString('pt-BR')} {sanitizeString(data.unit)}</td>
                                    <td className="p-4 font-bold text-gray-800">
                                        <div className="flex items-center space-x-2 group relative">
                                            <span>{(data.emissions_kgCO2e || 0).toLocaleString('pt-BR', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>
                                            {data.factor_value && (
                                                <>
                                                    <InfoIcon className="text-gray-400"/>
                                                    <div className="absolute bottom-full mb-2 w-max bg-gray-800 text-white text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                                                        Cálculo: {data.quantity} {data.unit} * {data.factor_value} ({data.factor_source})
                                                    </div>
                                                </>
                                            )}
                                        </div>
                                    </td>
                                    <td className="p-4">
                                        <button onClick={() => onDelete(data.id)} className="text-gray-400 hover:text-red-500" aria-label="Remover dado de atividade">
                                            <TrashIcon />
                                        </button>
                                    </td>
                                </tr>
                            )) : (<tr><td colSpan="6" className="text-center p-10 text-gray-500">Nenhum dado registado para este escopo.</td></tr>)}
                        </tbody>
                    </table>
                     {/* Versão mobile da tabela - stacked rows */}
                    <div className="md:hidden space-y-4">
                        {dataByScope.length > 0 ? dataByScope.map(data => (
                            <div key={data.id} className="bg-gray-50 p-4 rounded-lg shadow-sm border border-gray-200">
                                <div className="flex justify-between items-center mb-2">
                                    <span className="text-xs text-gray-500">{sanitizeString(data.date)}</span>
                                    <button onClick={() => onDelete(data.id)} className="text-gray-400 hover:text-red-500" aria-label="Remover dado de atividade">
                                        <TrashIcon />
                                    </button>
                                </div>
                                <div className="text-lg font-bold text-gray-800">{sanitizeString(data.category)}</div>
                                <div className="text-sm text-gray-600 mt-1">{sanitizeString(data.facility)}</div>
                                <div className="mt-2 text-md font-medium text-gray-700">
                                    {data.quantity.toLocaleString('pt-BR')} {sanitizeString(data.unit)}
                                </div>
                                <div className="mt-1 font-bold text-gray-800">
                                    Emissões: {(data.emissions_kgCO2e || 0).toLocaleString('pt-BR', {minimumFractionDigits: 2, maximumFractionDigits: 2})} kgCO₂e
                                </div>
                            </div>
                        )) : (
                            <p className="text-center text-gray-500 py-10">Nenhum dado registado para este escopo.</p>
                        )}
                    </div>
                </div>
                 {hasMoreData && (
                    <div className="mt-6 text-center">
                        <button onClick={loadMoreData} className="bg-gray-200 text-gray-800 font-bold py-2 px-6 rounded-full">
                            Carregar Mais Dados
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
};
const StrategyPage = ({ goals, onAddGoalClick, onDeleteGoal, initiatives, onSaveInitiative, onDeleteInitiative, activityData }) => {
    const [newInitiative, setNewInitiative] = useState({ name: '', category: 'Eficiência Energética', reduction_tCO2e: '', cost: '', status: 'Planeado' });
    const handleChange = (e) => { const { name, value } = e.target; setNewInitiative(prev => ({ ...prev, [name]: value })); };
    const handleSubmit = (e) => { e.preventDefault(); if(newInitiative.name && newInitiative.reduction_tCO2e && newInitiative.cost) { onSaveInitiative(newInitiative); setNewInitiative({ name: '', category: 'Eficiência Energética', reduction_tCO2e: '', cost: '', status: 'Planeado' }); } };
    const statusColor = { 'Planeado': 'bg-gray-200 text-gray-800', 'Em Curso': 'bg-yellow-200 text-yellow-800', 'Concluído': 'bg-green-200 text-green-800' };
    const initiativeCategories = ['Eficiência Energética', 'Energias Renováveis', 'Logística', 'Cadeia de Fornecedores', 'Economia Circular', 'Outro'];

    const { reductionNeeded, potentialFromInitiatives, gap } = useMemo(() => {
        if (!goals || goals.length === 0) return { reductionNeeded: 0, potentialFromInitiatives: 0, gap: 0 };
        const primaryGoal = goals.sort((a,b) => a.targetYear - b.targetYear)[0];
        const reductionNeeded = primaryGoal.baselineValue - primaryGoal.targetValue;
        const potentialFromInitiatives = initiatives.reduce((sum, item) => sum + Number(item.reduction_tCO2e), 0);
        const gap = reductionNeeded - potentialFromInitiatives;
        return { reductionNeeded, potentialFromInitiatives, gap };
    }, [goals, initiatives]);

    const maccData = useMemo(() => {
        if (initiatives.length === 0) return []; 
        let cumulativeReduction = 0;
        return initiatives
            .map(i => ({ ...i, costEffectiveness: i.reduction_tCO2e > 0 ? i.cost / i.reduction_tCO2e : 0 }))
            .sort((a, b) => a.costEffectiveness - b.costEffectiveness)
            .map(i => { 
                const bar = { ...i, cumulativeStart: cumulativeReduction, cumulativeEnd: cumulativeReduction + i.reduction_tCO2e }; 
                cumulativeReduction += i.reduction_tCO2e; 
                return bar; 
            });
    }, [initiatives]);
    
    // Preparar dados para o gráfico de cascata (waterfall)
    const waterfallData = useMemo(() => {
        if (!goals || goals.length === 0 || !activityData || activityData.length === 0) return [];
        const latestEmissions = activityData.reduce((sum, item) => sum + (item.emissions_kgCO2e || 0), 0) / 1000;
        const baseline = goals.length > 0 ? goals[0].baselineValue : 0;
        const data = [{ name: `Ano Base (${goals[0].baselineYear})`, y: baseline, x: 0 }];

        const plannedReduction = initiatives.reduce((sum, i) => sum + Number(i.reduction_tCO2e), 0);
        data.push({
            name: 'Redução Planeada',
            y: plannedReduction,
            x: 1,
            fill: COLORS.cyan,
            isNegative: true
        });

        const target = goals[0].targetValue;
        const gap = latestEmissions - target;

        data.push({
            name: 'Gap',
            y: gap > 0 ? gap : 0,
            x: 2,
            fill: COLORS.orange,
            isNegative: false
        });

        data.push({
            name: 'Emissões Atuais',
            y: latestEmissions,
            x: 3,
            fill: COLORS.darkBlue,
            isNegative: false
        });

        return data;
    }, [goals, initiatives, activityData]);

    return (
        <div className="space-y-8">
            <header><h1 className="text-2xl md:text-3xl font-bold text-gray-800">Estratégia de Descarbonização</h1><p className="text-gray-500 mt-1">Defina metas, gira iniciativas e analise o seu roteiro para emissões líquidas zero.</p></header>
            
            <div className="bg-white p-6 rounded-xl shadow-lg">
                <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl md:text-2xl font-bold text-gray-800">Metas de Redução</h2>
                    <button onClick={onAddGoalClick} className="bg-[#0A2F5B] text-white font-bold py-2 px-4 rounded-lg flex items-center" aria-label="Adicionar nova meta"><PlusIcon /> Nova Meta</button>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">{goals.length > 0 ? goals.map(g => <GoalCard key={g.id} goal={g} onDelete={onDeleteGoal} />) : <p className="col-span-full text-center text-gray-500 py-10">Nenhuma meta cadastrada.</p>}</div>
            </div>

            {goals.length > 0 && (
                <div className="bg-white p-6 rounded-xl shadow-lg">
                    <div className="flex items-center space-x-2 mb-4">
                        <h2 className="text-xl md:text-2xl font-bold text-gray-800">Análise de Lacunas (Gap Analysis)</h2>
                        <TooltipInfo text="A análise de lacunas compara a redução de emissões necessária para atingir a meta com o potencial de redução das iniciativas planeadas. É uma ferramenta de gestão estratégica para identificar a necessidade de novas ações (GHG Protocol, Cap. 2, p. 11)." />
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                        <div className="bg-gray-100 p-4 rounded-lg">
                            <h4 className="text-sm font-medium text-gray-500">Redução Necessária</h4>
                            <p className="text-2xl font-bold text-gray-800">{reductionNeeded.toLocaleString('pt-BR')} tCO₂e</p>
                        </div>
                        <div className="bg-green-100 p-4 rounded-lg">
                            <h4 className="text-sm font-medium text-green-800">Potencial das Iniciativas</h4>
                            <p className="text-2xl font-bold text-green-800">{potentialFromInitiatives.toLocaleString('pt-BR')} tCO₂e</p>
                        </div>
                        <div className={`p-4 rounded-lg ${gap > 0 ? 'bg-red-100' : 'bg-blue-100'}`}>
                            <h4 className={`text-sm font-medium ${gap > 0 ? 'text-red-800' : 'text-blue-800'}`}>{gap > 0 ? 'Lacuna a Preencher' : 'Excedente'}</h4>
                            <p className={`text-2xl font-bold ${gap > 0 ? 'text-red-800' : 'text-blue-800'}`}>{Math.abs(gap).toLocaleString('pt-BR')} tCO₂e</p>
                        </div>
                    </div>
                </div>
            )}

            <div className="bg-white p-6 rounded-xl shadow-lg">
                <h2 className="text-xl md:text-2xl font-bold text-gray-800 mb-4">Banco de Projetos de Redução</h2>
                <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-5 gap-4 items-end mb-6 p-4 bg-gray-50 rounded-lg">
                    <div className="md:col-span-2 xl:col-span-1">
                        <div className="flex items-center space-x-2">
                             <label htmlFor="initiative-name" className="block text-sm font-medium text-gray-700">Nome da Iniciativa</label>
                             <TooltipInfo text="A descrição de um projeto de redução de emissões, como o uso de energias renováveis ou melhoria de eficiência. (GHG Protocol, Cap. 2, p. 11)" />
                        </div>
                        <input id="initiative-name" type="text" name="name" value={newInitiative.name} onChange={handleChange} placeholder="Ex: Trocar iluminação por LED" className="mt-1 w-full p-2 rounded-lg border" required />
                    </div>
                    <div>
                         <div className="flex items-center space-x-2">
                             <label htmlFor="initiative-category" className="block text-sm font-medium text-gray-700">Categoria</label>
                             <TooltipInfo text="A categoria da iniciativa, que ajuda a classificar os tipos de projetos de mitigação que a empresa está a realizar. (GHG Protocol, Cap. 2, p. 11)" />
                         </div>
                         <select id="initiative-category" name="category" value={newInitiative.category} onChange={handleChange} className="mt-1 w-full p-2 rounded-lg border">{initiativeCategories.map(cat => <option key={cat}>{cat}</option>)}</select>
                    </div>
                    <div>
                         <div className="flex items-center space-x-2">
                            <label htmlFor="initiative-status" className="block text-sm font-medium text-gray-700">Status</label>
                            <TooltipInfo text="O status atual da iniciativa (planeada, em curso, concluída), essencial para a gestão do progresso e o reporte. (GHG Protocol, Cap. 2, p. 11)" />
                         </div>
                         <select id="initiative-status" name="status" value={newInitiative.status} onChange={handleChange} className="mt-1 w-full p-2 rounded-lg border">{Object.keys(statusColor).map(s => <option key={s}>{s}</option>)}</select>
                    </div>
                    <div>
                        <div className="flex items-center space-x-2">
                            <label htmlFor="initiative-reduction" className="block text-sm font-medium text-gray-700">Redução (tCO₂e)</label>
                            <TooltipInfo text="O potencial de redução de emissões da iniciativa, geralmente expresso em toneladas de CO₂e. Isso ajuda a quantificar o impacto do projeto. (GHG Protocol, Cap. 8, p. 58)" />
                        </div>
                        <input id="initiative-reduction" type="number" name="reduction_tCO2e" value={newInitiative.reduction_tCO2e} onChange={handleChange} className="mt-1 w-full p-2 rounded-lg border" required />
                    </div>
                    <div>
                        <div className="flex items-center space-x-2">
                             <label htmlFor="initiative-cost" className="block text-sm font-medium text-gray-700">Custo (€)</label>
                             <TooltipInfo text="O custo estimado da iniciativa, utilizado para calcular a custo-efetividade e priorizar projetos de redução. (GHG Protocol, Cap. 2, p. 11)" />
                        </div>
                        <input id="initiative-cost" type="number" name="cost" value={newInitiative.cost} onChange={handleChange} className="mt-1 w-full p-2 rounded-lg border" required />
                    </div>
                    <button type="submit" className="md:col-span-2 xl:col-span-5 bg-[#2EC4B6] text-white font-bold py-2 px-4 rounded-lg w-full" aria-label="Adicionar nova iniciativa">Adicionar Iniciativa</button>
                </form>
                <div className="overflow-x-auto">
                    <table className="w-full text-left">
                        <thead>
                            <tr className="border-b">
                                <th scope="col" className="p-4">Iniciativa</th>
                                <th scope="col" className="p-4">Categoria</th>
                                <th scope="col" className="p-4">Potencial (tCO₂e)</th>
                                <th scope="col" className="p-4">Custo (€)</th>
                                <th scope="col" className="p-4">Custo-Efetividade (€/tCO₂e)</th>
                                <th scope="col" className="p-4">Status</th>
                                <th scope="col" className="p-4">Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            {initiatives.length > 0 ? initiatives.map(i => (
                                <tr key={i.id} className="border-b hover:bg-gray-50">
                                    <td className="p-4 font-medium text-gray-800">{sanitizeString(i.name)}</td>
                                    <td className="p-4 text-gray-600">{sanitizeString(i.category)}</td>
                                    <td className="p-4 text-gray-600">{i.reduction_tCO2e.toLocaleString('pt-BR')}</td>
                                    <td className="p-4 text-gray-600">{i.cost.toLocaleString('pt-BR')}</td>
                                    <td className="p-4 font-bold text-gray-800">{(i.reduction_tCO2e > 0 ? i.cost / i.reduction_tCO2e : 0).toFixed(2)}</td>
                                    <td className="p-4"><span className={`px-2 py-1 text-xs font-semibold rounded-full ${statusColor[i.status]}`}>{sanitizeString(i.status)}</span></td>
                                    <td className="p-4">
                                        <button onClick={() => onDeleteInitiative(i.id)} className="text-gray-400 hover:text-red-500" aria-label="Remover iniciativa">
                                            <TrashIcon />
                                        </button>
                                    </td>
                                </tr>
                            )) : (<tr><td colSpan="7" className="text-center p-10 text-gray-500">Nenhuma iniciativa cadastrada.</td></tr>)}
                        </tbody>
                    </table>
                </div>
            </div>

            <div className="bg-white p-6 rounded-xl shadow-lg">
                <div className="flex items-center space-x-2 mb-4">
                    <h2 className="text-xl md:text-2xl font-bold text-gray-800">Análise de Redução por Iniciativas</h2>
                    <TooltipInfo text="Este gráfico visualiza o potencial de redução de emissões das iniciativas em comparação com a necessidade total de redução para atingir uma meta. Auxilia na tomada de decisões estratégicas de descarbonização (GHG Protocol, Cap. 8, p. 58)." />
                </div>
                <p className="text-gray-600 mb-4">Veja como as iniciativas contribuem para a redução de emissões em relação ao total.</p>
                <ResponsiveContainer width="100%" height={300}>
                    <BarChart data={waterfallData} layout="vertical" margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis type="number" dataKey="y" />
                        <YAxis dataKey="name" type="category" />
                        <Tooltip />
                        <Bar dataKey="y" fill={COLORS.darkBlue}>
                            {waterfallData.map((entry, index) => (
                                <Cell key={`cell-${index}`} fill={entry.fill} />
                            ))}
                        </Bar>
                    </BarChart>
                </ResponsiveContainer>
            </div>
        </div>
    );
};
const ReportingPage = ({ activityData, facilities, settings, user, onGeneratePrivateReport }) => {

    const handleGeneratePdf = () => {
        const doc = new window.jspdf.jsPDF();
        const facilityName = facilities[0]?.name || "Empresa";
        const period = settings?.inventoryPeriod || new Date().getFullYear();
        const dqiScore = ((activityData.filter(d => d.emissions_kgCO2e > 0).length / activityData.length) * 100).toFixed(0) + "%";
        
        doc.setFontSize(22);
        doc.text("Relatório de Inventário de GEE", 105, 20, null, null, "center");
        doc.setFontSize(14);
        doc.text(`${sanitizeString(facilityName)} - Ano ${period}`, 105, 30, null, null, "center");
        doc.setFontSize(10);
        doc.text(`Gerado por: ${user.email || 'Usuário Anônimo'}`, 10, 40);
        doc.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 10, 45);

        // Sumário Executivo
        doc.setFontSize(16);
        doc.text("1. Sumário Executivo", 14, 60);
        const summaryText = `Este relatório apresenta o inventário de emissões de gases de efeito estufa (GEE) para o ano de ${period}, seguindo a metodologia do Protocolo GHG. As emissões totais foram de ${(Object.values(activityData.reduce((acc, item) => { acc[item.scope] = (acc[item.scope] || 0) + (item.emissions_kgCO2e || 0); return acc; }, {})).reduce((sum, val) => sum + val, 0) / 1000).toFixed(2)} tCO₂e.`;
        doc.setFontSize(12);
        const summaryLines = doc.splitTextToSize(summaryText, 180);
        doc.text(summaryLines, 14, 68);

        // Indicador de Qualidade dos Dados (DQI)
        doc.setFontSize(14);
        doc.text("2. Qualidade dos Dados (DQI)", 14, 90);
        doc.setFontSize(12);
        doc.text(`DQI (Dados com Fator de Emissão): ${dqiScore}`, 14, 98);
        const dqiText = `O DQI representa a porcentagem de dados de atividade registrados que puderam ser convertidos em emissões. Um DQI alto (>95%) indica um sistema de dados robusto.`;
        const dqiLines = doc.splitTextToSize(dqiText, 180);
        doc.text(dqiLines, 14, 105);

        // Seção de Metodologia
        doc.setFontSize(14);
        doc.text("3. Metodologia", 14, doc.autoTable.previous?.finalY + 15 || 125);
        doc.setFontSize(12);
        const methodologyText = `Este inventário foi preparado com base no Protocolo GHG. A alocação de emissões é operacional. Os fatores de emissão utilizados são de bibliotecas ativas nas configurações do sistema.`;
        const methodologyLines = doc.splitTextToSize(methodologyText, 180);
        doc.text(methodologyLines, 14, 133);

        const scopeTotals = activityData.reduce((acc, item) => {
            if (!acc[item.scope]) acc[item.scope] = 0;
            acc[item.scope] += item.emissions_kgCO2e || 0;
            return acc;
        }, {});

        const summaryBody = Object.entries(scopeTotals).map(([scope, total]) => [
            sanitizeString(scope),
            total.toFixed(2)
        ]);
        const totalOverall = Object.values(scopeTotals).reduce((sum, val) => sum + val, 0);
        summaryBody.push(['Total Geral', totalOverall.toFixed(2)]);

        doc.autoTable({
            startY: doc.autoTable.previous?.finalY + 15 || 155,
            head: [['Escopo', 'Emissões Totais (tCO₂e)']],
            body: summaryBody,
            theme: 'grid',
            headStyles: { fillColor: [10, 47, 91] },
        });

        doc.save(`Inventario_GEE_${sanitizeString(facilityName)}_${period}.pdf`);
    };

    const handleExportCsv = () => {
        const csvData = activityData.map(item => ({
            Data: sanitizeString(item.date),
            Escopo: sanitizeString(item.scope),
            Categoria: sanitizeString(item.category),
            Unidade: sanitizeString(item.facility),
            Quantidade: item.quantity,
            Unidade_Medida: sanitizeString(item.unit),
            'Emissões (kgCO2e)': item.emissions_kgCO2e.toFixed(2),
            Fator_Utilizado: item.factor_value,
            Fonte_do_Fator: sanitizeString(item.factor_source)
        }));

        const csvString = window.Papa.unparse(csvData);
        const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement("a");
        const url = URL.createObjectURL(blob);
        link.setAttribute("href", url);
        link.setAttribute("download", "auditoria_dados_gee.csv");
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
    
    // Novo componente de análise de qualidade do inventário
    const InventoryQualityAnalysis = ({ activityData }) => {
        const dqiScore = useMemo(() => {
            const totalEntries = activityData.length;
            if (totalEntries === 0) return "N/A";
            const validEntries = activityData.filter(d => d.emissions_kgCO2e > 0).length;
            return ((validEntries / totalEntries) * 100).toFixed(0);
        }, [activityData]);
        
        const uncertaintyText = useMemo(() => {
            if (dqiScore === "N/A") return "Sem dados suficientes para análise.";
            if (dqiScore >= 95) return "O seu inventário demonstra alta qualidade e consistência. A incerteza nos dados é considerada mínima. (GHG Protocol, Cap. 7, p. 48).";
            if (dqiScore >= 80) return "A qualidade dos dados é boa, mas há oportunidades para melhorias na precisão. (GHG Protocol, Cap. 7, p. 48).";
            return "A incerteza nos dados é significativa. Recomenda-se uma revisão dos processos de coleta para aumentar a qualidade. (GHG Protocol, Cap. 7, p. 48).";
        }, [dqiScore]);

        return (
            <div className="bg-white p-6 rounded-xl shadow-lg mt-8">
                <div className="flex items-center space-x-2 mb-4">
                    <h3 className="text-xl font-bold text-gray-800">Análise de Qualidade do Inventário (DQI)</h3>
                    <TooltipInfo text="O Data Quality Indicator (DQI) mede a porcentagem de dados de atividade que puderam ser convertidos em emissões. Um DQI alto indica um sistema de dados robusto e menor incerteza nas estimativas de emissão. (GHG Protocol, Cap. 7, p. 48)." />
                </div>
                <div className="flex items-center space-x-4">
                    <div className="relative w-24 h-24">
                        <svg className="w-full h-full" viewBox="0 0 100 100">
                            <circle cx="50" cy="50" r="45" className="text-gray-200 stroke-current" strokeWidth="10" fill="transparent"></circle>
                            <circle cx="50" cy="50" r="45" className="text-[#2EC4B6] progress-ring__circle stroke-current transition-all duration-500 ease-out" strokeWidth="10" fill="transparent" strokeDasharray={`${dqiScore}, 283`} transform="rotate(-90 50 50)"></circle>
                            <text x="50" y="50" textAnchor="middle" dy="7" fontSize="20" className="font-bold text-gray-800">{dqiScore}%</text>
                        </svg>
                    </div>
                    <p className="text-gray-600 max-w-md">{uncertaintyText}</p>
                </div>
            </div>
        );
    };

    return (
        <div>
            <header className="mb-8"><h1 className="text-2xl md:text-3xl font-bold text-gray-800">Divulgação e Relatórios</h1><p className="text-gray-500 mt-1">Gere e exporte o seu inventário e relatórios para os principais frameworks globais.</p></header>
            <InventoryQualityAnalysis activityData={activityData} />
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mt-8">
                <div className="bg-white p-6 rounded-xl shadow-lg">
                    <h2 className="text-xl md:text-2xl font-bold text-gray-800 mb-2">Inventário de GEE (GHG Protocol)</h2>
                    <p className="text-gray-600 mb-6">Gere um relatório completo em PDF do seu inventário de emissões, ideal para relatórios de sustentabilidade e comunicação externa.</p>
                    <button onClick={handleGeneratePdf} className="w-full bg-[#0A2F5B] text-white font-bold py-3 px-6 rounded-xl shadow-lg hover:bg-[#14437d]">Gerar Relatório PDF</button>
                </div>
                <div className="bg-white p-6 rounded-xl shadow-lg">
                    <h2 className="text-xl md:text-2xl font-bold text-gray-800 mb-2">Exportação para Auditoria</h2>
                    <p className="text-gray-600 mb-6">Exporte todos os dados de atividade e os cálculos de emissão num ficheiro CSV detalhado para verificação por auditores independentes.</p>
                    <button onClick={handleExportCsv} className="w-full bg-[#0A2F5B] text-white font-bold py-3 px-6 rounded-xl shadow-lg hover:bg-[#14437d]">Exportar Dados para Auditoria (CSV)</button>
                </div>
                {user?.role === 'admin' && (
                    <div className="bg-white p-6 rounded-xl shadow-lg md:col-span-2">
                        <h2 className="text-xl md:text-2xl font-bold text-gray-800 mb-2">Acesso a Relatórios Confidenciais</h2>
                        <p className="text-gray-600 mb-6">Esta funcionalidade está disponível apenas para administradores e permite aceder a informações restritas.</p>
                        <button onClick={onGeneratePrivateReport} className="w-full bg-orange-500 text-white font-bold py-3 px-6 rounded-xl shadow-lg hover:bg-orange-600">Aceder a Relatório Confidencial</button>
                    </div>
                )}
            </div>
        </div>
    );
};
const SettingsPage = ({ facilities, onManageFacilitiesClick, settings, onSaveSettings }) => {
    const [activeLibraries, setActiveLibraries] = useState(settings?.activeLibraries || ['GHG Protocol / IPCC']);
    const [alertThreshold, setAlertThreshold] = useState(settings?.alertThreshold || 1000);

    const handleLibraryToggle = (libraryName) => {
        setActiveLibraries(prev => 
            prev.includes(libraryName) 
                ? prev.filter(lib => lib !== libraryName) 
                : [...prev, libraryName]
        );
    };

    const handleSave = () => {
        onSaveSettings({ ...settings, activeLibraries, alertThreshold: Number(alertThreshold) });
    };
    
    const settingsInfo = {
        'Fatores de Emissão': 'O GHG Protocol recomenda o uso de fatores de emissão para calcular as emissões. É vital usar a metodologia consistente para garantir a precisão. (GHG Protocol, Cap. 6, p. 42).',
        'Estrutura Organizacional': 'A definição clara das fronteiras da organização é o primeiro passo para um inventário completo. Deve-se decidir sobre a abordagem de consolidação (participação ou controlo) para todas as operações. (GHG Protocol, Cap. 3, p. 16).',
    };

    return (
        <div>
            <header className="mb-8">
                <h1 className="text-2xl md:text-3xl font-bold text-gray-800">Configurações</h1>
                <p className="text-gray-500 mt-1">Gerencie a estrutura da sua organização, fatores de emissão e utilizadores.</p>
            </header>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <div className="bg-white p-6 rounded-xl shadow-lg">
                    <div className="flex items-center space-x-2 mb-4">
                        <h2 className="text-xl md:text-2xl font-bold text-gray-800 flex items-center"><BuildingIcon /> Estrutura Organizacional</h2>
                        <TooltipInfo text={settingsInfo['Estrutura Organizacional']} />
                    </div>
                    <p className="text-gray-600 mb-4">Defina as unidades de negócio, filiais e instalações para uma contabilidade granular. Unidades atuais: {facilities.length}</p>
                    <button onClick={onManageFacilitiesClick} className="bg-[#0A2F5B] text-white font-bold py-2 px-4 rounded-full">Gerenciar Unidades</button>
                </div>
                 <div className="bg-white p-6 rounded-xl shadow-lg">
                    <h2 className="text-xl md:text-2xl font-bold text-gray-800 mb-4 flex items-center"><AlertIcon /> Alertas Automáticos</h2>
                    <p className="text-gray-600 mb-4">Receba uma notificação se as emissões mensais ultrapassarem um determinado limite.</p>
                    <div>
                        <label htmlFor="alert-threshold" className="block text-sm font-medium text-gray-700 mb-1">Limite Mensal de Emissões (tCO₂e)</label>
                        <input 
                            id="alert-threshold"
                            type="number" 
                            value={alertThreshold} 
                            onChange={(e) => setAlertThreshold(e.target.value)} 
                            className="w-full p-3 rounded-lg border" 
                        />
                    </div>
                </div>
                <div className="bg-white p-6 rounded-xl shadow-lg lg:col-span-2">
                    <div className="flex items-center space-x-2 mb-4">
                        <h2 className="text-xl md:text-2xl font-bold text-gray-800 flex items-center"><LibraryIcon /> Fatores de Emissão</h2>
                        <TooltipInfo text={settingsInfo['Fatores de Emissão']} />
                    </div>
                    <p className="text-gray-600 mb-4">Ative as bibliotecas de fatores de emissão que deseja utilizar nos cálculos. A busca seguirá a ordem: Nacional, Setorial e Global.</p>
                    <div className="space-y-4">
                        {Object.entries(emissionFactorsLibraries).map(([group, libraries]) => (
                            <div key={group}>
                                <h3 className="font-semibold text-lg text-gray-700 mb-2">{group}</h3>
                                {Object.keys(libraries).map(libName => (
                                    <label key={libName} className="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-50">
                                        <input 
                                            type="checkbox" 
                                            checked={activeLibraries.includes(libName)} 
                                            onChange={() => handleLibraryToggle(libName)}
                                            className="h-5 w-5 rounded text-[#2EC4B6] focus:ring-[#2EC4B6] border-gray-300"
                                        />
                                        <span>{libName}</span>
                                    </label>
                                ))}
                            </div>
                        ))}
                    </div>
                </div>
            </div>
            <div className="mt-8 flex justify-end">
                <button onClick={handleSave} className="bg-[#2EC4B6] text-white font-bold py-3 px-8 rounded-full text-lg">Salvar Todas as Configurações</button>
            </div>
        </div>
    );
};

const AuditingPage = ({ onAuditingModalOpen }) => {
    return (
        <div className="space-y-8">
            <header>
                <h1 className="text-2xl md:text-3xl font-bold text-gray-800">Auditoria e Verificação</h1>
                <p className="text-gray-500 mt-1">Gestão da qualidade do inventário, verificação e documentação para garantir a credibilidade dos dados.</p>
            </header>
            
            <div className="bg-white p-6 rounded-xl shadow-lg">
                <div className="flex items-center space-x-2 mb-4">
                    <h2 className="text-xl md:text-2xl font-bold text-gray-800">Gestão da Qualidade (GHG Protocol, Cap. 7)</h2>
                    <TooltipInfo text="Um sistema de gestão de qualidade assegura que o seu inventário de GEE seja preciso, completo e consistente, seguindo os princípios do GHG Protocol. Isso aumenta a confiança nos seus dados." />
                </div>
                <p className="text-gray-600 mb-6">A gestão de qualidade é um processo contínuo que envolve a prevenção e a correção de erros nos dados, sistemas e metodologias.</p>
                <button onClick={onAuditingModalOpen} className="bg-[#0A2F5B] text-white font-bold py-2 px-4 rounded-lg">Saiba Mais</button>
            </div>
            
            <div className="bg-white p-6 rounded-xl shadow-lg">
                <div className="flex items-center space-x-2 mb-4">
                    <h2 className="text-xl md:text-2xl font-bold text-gray-800">Verificação Independente (GHG Protocol, Cap. 10)</h2>
                    <TooltipInfo text="A verificação externa é uma avaliação objetiva de um inventário de GEE por um terceiro independente. Ela aumenta a credibilidade dos relatórios públicos e é, muitas vezes, um requisito para programas de conformidade e mercados de carbono." />
                </div>
                <p className="text-gray-600 mb-6">A verificação garante que a informação comunicada seja um retrato fiel das emissões da empresa. Um verificador avalia os riscos de discrepâncias e a aderência aos princípios do GHG Protocol.</p>
                <button className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-lg disabled:bg-gray-400" disabled>
                    Agendar Verificação (Em breve)
                </button>
            </div>
        </div>
    );
};
const PlaceholderPage = ({ title }) => ( <div><header className="mb-8"><h1 className="text-2xl md:text-3xl font-bold text-gray-800">{title}</h1><p className="text-gray-500 mt-1">Este módulo será desenvolvido nas próximas fases do projeto.</p></header><div className="bg-white p-10 rounded-xl shadow-lg text-center"><h2 className="text-xl md:text-2xl font-bold text-gray-800 mb-4">Em Construção</h2><p className="text-gray-600">Funcionalidades para {title.toLowerCase()} estarão disponíveis em breve.</p></div></div> );

const RiskPage = ({ risks, onSaveRisk, onDeleteRisk }) => {
    const [newRisk, setNewRisk] = useState({ description: '', type: 'Transição', impact: 1, probability: 1, mitigation: '' });

    const handleRiskChange = (e) => {
        const { name, value } = e.target;
        setNewRisk(prev => ({ ...prev, [name]: name === 'impact' || name === 'probability' ? Number(value) : value }));
    };

    const handleRiskSubmit = (e) => {
        e.preventDefault();
        onSaveRisk(newRisk);
        setNewRisk({ description: '', type: 'Transição', impact: 1, probability: 1, mitigation: '' });
    };
    
    const riskColor = (impact, probability) => {
        const score = impact * probability;
        if (score > 15) return '#EF4444'; 
        if (score > 8) return '#F97316'; 
        if (score > 3) return '#FBBF24'; 
        return '#22C55E'; 
    };

    const riskInfo = {
        'Matriz de Risco (Heatmap)': 'Ferramenta visual para mapear riscos climáticos com base em sua probabilidade de ocorrência e impacto financeiro. Permite à empresa priorizar e focar nas ameaças mais significativas (GHG Protocol, Cap. 2, p. 11).',
    };

    return (
        <div className="space-y-8">
            <header>
                <h1 className="text-2xl md:text-3xl font-bold text-gray-800">Risco & Resiliência Climática</h1>
                <p className="text-gray-500 mt-1">Identifique, avalie e gira os riscos climáticos que podem afetar a sua organização.</p>
            </header>

            <div className="bg-white p-6 rounded-xl shadow-lg">
                <div className="flex items-center space-x-2 mb-4">
                    <h2 className="text-xl md:text-2xl font-bold text-gray-800">Matriz de Risco (Heatmap)</h2>
                    <TooltipInfo text={riskInfo['Matriz de Risco (Heatmap)']} />
                </div>
                 <ResponsiveContainer width="100%" height={400}>
                    <ScatterChart margin={{ top: 20, right: 20, bottom: 20, left: 20 }}>
                        <CartesianGrid />
                        <XAxis type="number" dataKey="probability" name="Probabilidade" domain={[0, 5]} ticks={[1, 2, 3, 4, 5]} label={{ value: "Probabilidade", position: 'insideBottom', offset: -10 }} />
                        <YAxis type="number" dataKey="impact" name="Impacto Financeiro" domain={[0, 5]} ticks={[1, 2, 3, 4, 5]} label={{ value: "Impacto Financeiro", angle: -90, position: 'insideLeft' }} />
                        <ZAxis dataKey="description" name="Descrição" />
                        <Tooltip cursor={{ strokeDasharray: '3 3' }} content={({ active, payload }) => {
                            if (active && payload && payload.length) {
                                const data = payload[0].payload;
                                return <div className="bg-white p-4 border rounded shadow-lg"><p className="font-bold">{sanitizeString(data.description)}</p><p>Tipo: {sanitizeString(data.type)}</p><p>Probabilidade: {data.probability}</p><p>Impacto: {data.impact}</p></div>;
                            }
                            return null;
                        }}/>
                        <Scatter name="Riscos" data={risks} >
                            {risks.map((risk, index) => (
                                <Cell key={`cell-${index}`} fill={riskColor(risk.impact, risk.probability)} />
                            ))}
                        </Scatter>
                    </ScatterChart>
                </ResponsiveContainer>
            </div>

            <div className="bg-white p-6 rounded-xl shadow-lg">
                <h2 className="text-xl md:text-2xl font-bold text-gray-800 mb-4">Registo de Riscos</h2>
                <form onSubmit={handleRiskSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-4 items-start mb-6 p-4 bg-gray-50 rounded-lg">
                    <div className="md:col-span-2">
                        <div className="flex items-center space-x-2">
                            <label htmlFor="risk-description" className="block text-sm font-medium text-gray-700">Descrição do Risco</label>
                            <TooltipInfo text="Descrição detalhada do risco climático, incluindo se é um risco físico (como inundações) ou de transição (como regulamentos de carbono). (GHG Protocol, Cap. 2, p. 11)." />
                        </div>
                        <input id="risk-description" type="text" name="description" value={newRisk.description} onChange={handleRiskChange} placeholder="Ex: Aumento do preço do carbono" className="mt-1 w-full p-2 rounded-lg border" required />
                    </div>
                    <div>
                        <div className="flex items-center space-x-2">
                            <label htmlFor="risk-type" className="block text-sm font-medium text-gray-700">Tipo</label>
                            <TooltipInfo text="Classifica se o risco é Físico (eventos relacionados ao clima) ou de Transição (mudanças de política, tecnologia ou mercado). (GHG Protocol, Cap. 2, p. 11)." />
                        </div>
                        <select id="risk-type" name="type" value={newRisk.type} onChange={handleRiskChange} className="mt-1 w-full p-2 rounded-lg border">
                            <option>Transição</option><option>Físico</option>
                        </select>
                    </div>
                    <div>
                        <div className="flex items-center space-x-2">
                            <label htmlFor="risk-probability" className="block text-sm font-medium text-gray-700">Probabilidade (1-5)</label>
                            <TooltipInfo text="Uma avaliação da probabilidade de ocorrência do risco em uma escala de 1 a 5, onde 5 é a mais provável. Ajuda a priorizar os riscos na matriz de risco. (GHG Protocol, Cap. 2, p. 11)." />
                        </div>
                        <input id="risk-probability" type="number" name="probability" min="1" max="5" value={newRisk.probability} onChange={handleRiskChange} className="mt-1 w-full p-2 rounded-lg border" required />
                    </div>
                    <div>
                        <div className="flex items-center space-x-2">
                            <label htmlFor="risk-impact" className="block text-sm font-medium text-gray-700">Impacto Financeiro (1-5)</label>
                            <TooltipInfo text="Uma avaliação do impacto financeiro do risco em uma escala de 1 a 5, onde 5 é o mais grave. Essencial para a gestão de riscos e para o reporte ao TCFD. (GHG Protocol, Cap. 2, p. 11)." />
                        </div>
                        <input id="risk-impact" type="number" name="impact" min="1" max="5" value={newRisk.impact} onChange={handleRiskChange} className="mt-1 w-full p-2 rounded-lg border" required />
                    </div>
                    <div className="md:col-span-2">
                        <label htmlFor="risk-mitigation" className="block text-sm font-medium text-gray-700">Ações de Mitigação</label>
                        <textarea id="risk-mitigation" name="mitigation" value={newRisk.mitigation} onChange={handleRiskChange} rows="3" className="mt-1 w-full p-2 rounded-lg border"></textarea>
                    </div>
                    <button type="submit" className="md:col-span-2 bg-[#2EC4B6] text-white font-bold py-2 px-4 rounded-lg w-full" aria-label="Adicionar risco">Adicionar Risco</button>
                </form>
                <div className="overflow-x-auto">
                    <table className="w-full text-left">
                        <thead>
                            <tr className="border-b">
                                <th scope="col" className="p-4">Descrição</th>
                                <th scope="col" className="p-4">Tipo</th>
                                <th scope="col" className="p-4">Probabilidade</th>
                                <th scope="col" className="p-4">Impacto</th>
                                <th scope="col" className="p-4">Mitigação</th>
                                <th scope="col" className="p-4">Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            {risks.length > 0 ? risks.map(r => (
                                <tr key={r.id} className="border-b hover:bg-gray-50">
                                    <td className="p-4 font-medium text-gray-800">{sanitizeString(r.description)}</td>
                                    <td className="p-4 text-gray-600">{sanitizeString(r.type)}</td>
                                    <td className="p-4 text-gray-600">{r.probability}</td>
                                    <td className="p-4 text-gray-600">{r.impact}</td>
                                    <td className="p-4 text-gray-600 text-sm">{sanitizeString(r.mitigation)}</td>
                                    <td className="p-4">
                                        <button onClick={() => onDeleteRisk(r.id)} className="text-gray-400 hover:text-red-500" aria-label="Remover risco">
                                            <TrashIcon />
                                        </button>
                                    </td>
                                </tr>
                            )) : (<tr><td colSpan="6" className="text-center p-10 text-gray-500">Nenhum risco registado.</td></tr>)}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
};

const SupplyChainPage = ({ suppliers, onSaveSupplier, onDeleteSupplier }) => {
    const [newSupplier, setNewSupplier] = useState({ name: '', category: 'Matéria-prima', spend: '' });
    
    const handleSupplierChange = (e) => {
        const { name, value } = e.target;
        setNewSupplier(prev => ({ ...prev, [name]: value }));
    };

    const handleSupplierSubmit = (e) => {
        e.preventDefault();
        onSaveSupplier(newSupplier);
        setNewSupplier({ name: '', category: 'Matéria-prima', spend: '' });
    };

    const supplierCategories = ['Matéria-prima', 'Logística', 'Serviços Profissionais', 'Bens de Capital', 'Outros'];

    const { totalSpend, totalEmissions } = useMemo(() => {
        const totalSpend = suppliers.reduce((sum, s) => sum + Number(s.spend || 0), 0);
        const totalEmissions = suppliers.reduce((sum, s) => sum + Number(s.emissions_kgCO2e || 0), 0) / 1000;
        return { totalSpend, totalEmissions };
    }, [suppliers]);

    return (
        <div className="space-y-8">
            <header>
                <h1 className="text-2xl md:text-3xl font-bold text-gray-800">Gestão da Cadeia de Valor (Escopo 3)</h1>
                <p className="text-gray-500 mt-1">Engage seus fornecedores, colete dados e identifique os principais focos de emissão.</p>
            </header>
            
            <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-6">
                <KpiCard title="Fornecedores Registados" value={suppliers.length} unit="fornecedores" infoText="Número de fornecedores na sua cadeia de valor. A inclusão de dados da cadeia de valor é crucial para uma contabilidade completa das emissões (GHG Protocol, Cap. 4, p. 29)." />
                <KpiCard title="Gasto Total (Spend)" value={`€ ${totalSpend.toLocaleString('pt-BR')}`} unit="anual" infoText="O gasto total com fornecedores, que pode ser usado como um indicador proxy para estimar as emissões de Escopo 3 quando os dados de atividade não estão disponíveis (GHG Protocol, Cap. 4, p. 29)." />
                <KpiCard title="Emissões da Cadeia de Valor" value={totalEmissions.toFixed(2)} unit="tCO₂e" infoText="As emissões estimadas de Escopo 3 provenientes da sua cadeia de valor. Monitorizar essas emissões ajuda a identificar hotspots e oportunidades de redução (GHG Protocol, Cap. 4, p. 29)." />
            </div>

            <div className="bg-white p-6 rounded-xl shadow-lg">
                <h2 className="text-xl md:text-2xl font-bold text-gray-800 mb-4">Registo de Fornecedores</h2>
                <form onSubmit={handleSupplierSubmit} className="grid grid-cols-1 md:grid-cols-4 gap-4 items-end mb-6 p-4 bg-gray-50 rounded-lg">
                    <div className="md:col-span-2">
                        <div className="flex items-center space-x-2">
                            <label htmlFor="supplier-name" className="block text-sm font-medium text-gray-700">Nome do Fornecedor</label>
                            <TooltipInfo text="Identifica a entidade fornecedora para rastreamento e engajamento. (GHG Protocol, Cap. 4, p. 29)." />
                        </div>
                        <input id="supplier-name" type="text" name="name" value={newSupplier.name} onChange={handleSupplierChange} className="mt-1 w-full p-2 rounded-lg border" required />
                    </div>
                    <div>
                        <div className="flex items-center space-x-2">
                            <label htmlFor="supplier-category" className="block text-sm font-medium text-gray-700">Categoria</label>
                            <TooltipInfo text="Classificação do tipo de fornecimento para agregação e análise de hotspots de emissão na cadeia de valor. (GHG Protocol, Cap. 4, p. 29)." />
                        </div>
                        <select id="supplier-category" name="category" value={newSupplier.category} onChange={handleSupplierChange} className="mt-1 w-full p-2 rounded-lg border">
                            {supplierCategories.map(cat => <option key={cat}>{cat}</option>)}
                        </select>
                    </div>
                    <div>
                        <div className="flex items-center space-x-2">
                            <label htmlFor="supplier-spend" className="block text-sm font-medium text-gray-700">Gasto Anual (€)</label>
                            <TooltipInfo text="O gasto financeiro é frequentemente usado como uma métrica de 'proxy' para estimar emissões de Escopo 3, especialmente quando dados de atividade diretos não estão disponíveis. (GHG Protocol, Cap. 4, p. 29)." />
                        </div>
                        <input id="supplier-spend" type="number" name="spend" value={newSupplier.spend} onChange={handleSupplierChange} className="mt-1 w-full p-2 rounded-lg border" required />
                    </div>
                    <button type="submit" className="md:col-span-4 bg-[#2EC4B6] text-white font-bold py-2 px-4 rounded-lg w-full" aria-label="Adicionar fornecedor">Adicionar Fornecedor</button>
                </form>
                <div className="overflow-x-auto">
                    <table className="w-full text-left">
                        <thead>
                            <tr className="border-b">
                                <th scope="col" className="p-4">Fornecedor</th>
                                <th scope="col" className="p-4">Categoria</th>
                                <th scope="col" className="p-4">Gasto (€)</th>
                                <th scope="col" className="p-4">Emissões (kgCO₂e)</th>
                                <th scope="col" className="p-4">Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            {suppliers.length > 0 ? suppliers.map(s => (
                                <tr key={s.id} className="border-b hover:bg-gray-50">
                                    <td className="p-4 font-medium text-gray-800">{sanitizeString(s.name)}</td>
                                    <td className="p-4 text-gray-600">{sanitizeString(s.category)}</td>
                                    <td className="p-4 text-gray-600">{Number(s.spend).toLocaleString('pt-BR')}</td>
                                    <td className="p-4 font-bold text-gray-800">{(s.emissions_kgCO2e || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
                                    <td className="p-4">
                                        <button onClick={() => onDeleteSupplier(s.id)} className="text-gray-400 hover:text-red-500" aria-label="Remover fornecedor">
                                            <TrashIcon />
                                        </button>
                                    </td>
                                </tr>
                            )) : (<tr><td colSpan="5" className="text-center p-10 text-gray-500">Nenhum fornecedor registado.</td></tr>)}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
};

const MarketPage = ({ credits, portfolio, onBuyCredit }) => {
    const [isBuying, setIsBuying] = useState(false);

    const { totalCredits, avgPrice, marketValue } = useMemo(() => {
        const totalCredits = portfolio.reduce((sum, item) => sum + item.quantity, 0);
        const totalCost = portfolio.reduce((sum, item) => sum + (item.quantity * item.price), 0);
        const avgPrice = totalCredits > 0 ? totalCost / totalCredits : 0;
        const marketValue = totalCost;
        return { totalCredits, avgPrice, marketValue };
    }, [portfolio]);

    const handleBuyClick = (credit) => {
        setIsBuying(true);
        onBuyCredit(credit).finally(() => setIsBuying(false));
    };

    const marketInfo = {
        'Créditos no Portfólio': 'O total de créditos de carbono que a empresa possui, representando a quantidade de GEE que a empresa pode compensar. (GHG Protocol, Cap. 8, p. 58).',
        'Preço Médio / tCO₂e': 'O preço médio ponderado por tonelada de CO₂e dos créditos de carbono no portfólio da empresa. Usado para rastrear o valor dos ativos de compensação. (GHG Protocol, Cap. 8, p. 58).',
        'Valor de Mercado Estimado': 'O valor total de mercado dos créditos de carbono no seu portfólio. (GHG Protocol, Cap. 8, p. 58).',
        'Projetos de Crédito de Carbono Disponíveis': 'Lista de projetos de redução de GEE que geram créditos de carbono. A compra desses créditos permite compensar emissões que não podem ser reduzidas internamente. (GHG Protocol, Cap. 8, p. 58).',
        'Meu Portfólio de Créditos': 'O seu portfólio de créditos de carbono comprados, que podem ser usados para alcançar as metas de redução de emissões ou para neutralizar o seu impacto. (GHG Protocol, Cap. 8, p. 58).',
    };

    return (
        <div className="space-y-8">
            <header>
                <h1 className="text-2xl md:text-3xl font-bold text-gray-800">Mercados de Carbono</h1>
                <p className="text-gray-500 mt-1">Explore, compre e gira créditos de carbono para compensar as suas emissões.</p>
            </header>

            <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-6">
                <KpiCard title="Créditos no Portfólio" value={totalCredits.toLocaleString('pt-BR')} unit="tCO₂e" infoText={marketInfo['Créditos no Portfólio']} />
                <KpiCard title="Preço Médio / tCO₂e" value={`€ ${avgPrice.toFixed(2)}`} unit="média" infoText={marketInfo['Preço Médio / tCO₂e']} />
                <KpiCard title="Valor de Mercado Estimado" value={`€ ${marketValue.toLocaleString('pt-BR')}`} unit="total" infoText={marketInfo['Valor de Mercado Estimado']} />
            </div>

            <div className="bg-white p-6 rounded-xl shadow-lg">
                <div className="flex items-center space-x-2 mb-4">
                    <h2 className="text-xl md:text-2xl font-bold text-gray-800">Projetos de Crédito de Carbono Disponíveis</h2>
                    <TooltipInfo text={marketInfo['Projetos de Crédito de Carbono Disponíveis']} />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                    {credits.map(credit => (
                        <div key={credit.id} className="border rounded-lg p-4 flex flex-col justify-between hover:shadow-xl transition-shadow">
                            <div>
                                <h3 className="font-bold text-lg text-gray-800">{sanitizeString(credit.name)}</h3>
                                <p className="text-sm text-gray-500">{sanitizeString(credit.location)}</p>
                                <div className="flex space-x-2 mt-2">
                                    <span className="text-xs bg-cyan-100 text-cyan-800 px-2 py-1 rounded-full font-semibold">{sanitizeString(credit.type)}</span>
                                    <span className="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded-full font-semibold">{sanitizeString(credit.standard)}</span>
                                </div>
                                <p className="text-2xl font-bold text-gray-800 my-4">€{credit.price.toFixed(2)} <span className="text-base font-medium text-gray-500">/ tCO₂e</span></p>
                                <p className="text-sm text-gray-600">Volume disponível: {credit.volume.toLocaleString('pt-BR')} tCO₂e</p>
                            </div>
                            <button onClick={() => handleBuyClick(credit)} disabled={isBuying} className="w-full mt-4 bg-[#0A2F5B] text-white font-bold py-2 px-4 rounded-lg disabled:bg-gray-400" aria-label={`Comprar créditos do projeto ${credit.name}`}>
                                {isBuying ? 'Comprando...' : 'Comprar Créditos'}
                            </button>
                        </div>
                    ))}
                </div>
            </div>
            
            <div className="bg-white p-6 rounded-xl shadow-lg">
                <div className="flex items-center space-x-2 mb-4">
                    <h2 className="text-xl md:text-2xl font-bold text-gray-800">Meu Portfólio de Créditos</h2>
                    <TooltipInfo text={marketInfo['Meu Portfólio de Créditos']} />
                </div>
                <div className="overflow-x-auto">
                     <table className="w-full text-left">
                        <thead>
                            <tr className="border-b">
                                <th scope="col" className="p-4">Projeto</th>
                                <th scope="col" className="p-4">Quantidade (tCO₂e)</th>
                                <th scope="col" className="p-4">Preço de Compra (€)</th>
                                <th scope="col" className="p-4">Custo Total (€)</th>
                            </tr>
                        </thead>
                        <tbody>
                            {portfolio.length > 0 ? portfolio.map(item => (
                                <tr key={item.id} className="border-b hover:bg-gray-50">
                                    <td className="p-4 font-medium text-gray-800">{sanitizeString(item.name)}</td>
                                    <td className="p-4 text-gray-600">{item.quantity.toLocaleString('pt-BR')}</td>
                                    <td className="p-4 text-gray-600">€{item.price.toFixed(2)}</td>
                                    <td className="p-4 font-bold text-gray-800">€{(item.quantity * item.price).toLocaleString('pt-BR')}</td>
                                </tr>
                            )) : (<tr><td colSpan="4" className="text-center p-10 text-gray-500">Nenhum crédito de carbono no seu portfólio.</td></tr>)}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
};

const AuthPage = ({ onSignIn, onSignUp, onAnonymousSignIn, isLogin, setIsLogin, error }) => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [role, setRole] = useState('user');

    const handleSubmit = (e) => {
        e.preventDefault();
        if (isLogin) {
            onSignIn(email, password);
        } else {
            onSignUp(email, password, role);
        }
    };

    return (
        <div className="flex h-screen items-center justify-center bg-gray-100 p-4">
            <div className="bg-white p-8 rounded-xl shadow-lg w-full max-w-md">
                <div className="text-center mb-6">
                    <img src="https://indiciumfin.github.io/indicium360/assets/images/indicium360-logo.webp" alt="Indicium360 Logo" className="h-12 mx-auto mb-4" />
                    <h2 className="text-2xl font-bold text-gray-800">{isLogin ? 'Iniciar Sessão' : 'Criar Conta'}</h2>
                    <p className="text-sm text-gray-500 mt-2">Use seu e-mail e senha para continuar.</p>
                </div>
                {error && (
                    <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 rounded-lg" role="alert">
                        <p>{error}</p>
                    </div>
                )}
                <form onSubmit={handleSubmit} className="space-y-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-700" htmlFor="email">Email</label>
                        <input
                            type="email"
                            id="email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            className="mt-1 w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#2EC4B6] focus:border-transparent"
                            required
                        />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700" htmlFor="password">Senha</label>
                        <input
                            type="password"
                            id="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            className="mt-1 w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#2EC4B6] focus:border-transparent"
                            required
                        />
                    </div>
                    {!isLogin && (
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Papel</label>
                            <div className="flex space-x-4 mt-2">
                                <label className="inline-flex items-center">
                                    <input type="radio" className="form-radio text-[#2EC4B6]" name="role" value="user" checked={role === 'user'} onChange={() => setRole('user')} />
                                    <span className="ml-2 text-gray-700">Utilizador</span>
                                </label>
                                <label className="inline-flex items-center">
                                    <input type="radio" className="form-radio text-[#2EC4B6]" name="role" value="admin" checked={role === 'admin'} onChange={() => setRole('admin')} />
                                    <span className="ml-2 text-gray-700">Admin</span>
                                </label>
                            </div>
                        </div>
                    )}
                    <button type="submit" className="w-full bg-[#0A2F5B] text-white font-bold py-3 px-4 rounded-lg hover:bg-[#1A4B86] transition-colors">
                        {isLogin ? 'Iniciar Sessão' : 'Registar'}
                    </button>
                </form>
                <div className="mt-6 text-center">
                    <button onClick={() => setIsLogin(!isLogin)} className="text-sm font-medium text-[#2EC4B6] hover:underline">
                        {isLogin ? 'Não tem uma conta? Crie uma.' : 'Já tem uma conta? Inicie sessão.'}
                    </button>
                </div>
                <div className="mt-6 text-center">
                    <button onClick={onAnonymousSignIn} className="text-sm font-medium text-gray-500 hover:underline">
                        Continuar sem conta (Ambiente Homologado)
                    </button>
                </div>
            </div>
        </div>
    );
};


// --- Componente Principal (App) ---
function App() {
    const [activePage, setActivePage] = useState('dashboard');
    const [db, setDb] = useState(null); 
    const [auth, setAuth] = useState(null);
    const [user, setUser] = useState(null);
    const [isAuthReady, setIsAuthReady] = useState(false);
    const [authError, setAuthError] = useState('');
    const [activityData, setActivityData] = useState([]); 
    const [facilities, setFacilities] = useState([]); 
    const [goals, setGoals] = useState([]); 
    const [initiatives, setInitiatives] = useState([]);
    const [risks, setRisks] = useState([]);
    const [suppliers, setSuppliers] = useState([]);
    const [carbonCredits, setCarbonCredits] = useState([]);
    const [portfolio, setPortfolio] = useState([]);
    const [settings, setSettings] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [showOnboarding, setShowOnboarding] = useState(false);
    const [alerts, setAlerts] = useState([]);
    const [isSidebarOpen, setIsSidebarOpen] = useState(false);
    const [lastDoc, setLastDoc] = useState(null);
    const [hasMoreData, setHasMoreData] = useState(true);
    const [isLogin, setIsLogin] = useState(true);

    const [isAddDataModalOpen, setIsAddDataModalOpen] = useState(false); const [addDataModalProps, setAddDataModalProps] = useState({});
    const [isManageFacilitiesModalOpen, setIsManageFacilitiesModalOpen] = useState(false);
    const [isAddGoalModalOpen, setIsAddGoalModalOpen] = useState(false);
    const [isFrameworkReportModalOpen, setIsFrameworkReportModalOpen] = useState(false); const [selectedFramework, setSelectedFramework] = useState('');
    const [isImportCsvModalOpen, setIsImportCsvModalOpen] = useState(false);
    const [toast, setToast] = useState(null);
    const [isPrivateReportModalOpen, setIsPrivateReportModalOpen] = useState(false);
    const [isGhgInfoModalOpen, setIsGhgInfoModalOpen] = useState(false);
    const [isAuditingModalOpen, setIsAuditingModalOpen] = useState(false);


    useEffect(() => {
        const scripts = [
            'https://cdnjs.cloudflare.com/ajax/libs/papaparse/5.3.2/papaparse.min.js',
            'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js',
            'https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js'
        ];
        scripts.forEach(src => {
            if (!document.querySelector(`script[src="${src}"]`)) {
                const script = document.createElement('script');
                script.src = src;
                script.async = false;
                document.body.appendChild(script);
            }
        });

        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
        if (!firebaseConfig) { console.error("Configuração do Firebase não encontrada."); setIsLoading(false); return; }
        try {
            const app = initializeApp(firebaseConfig); 
            const authInstance = getAuth(app); 
            setAuth(authInstance);
            setDb(getFirestore(app));

            onAuthStateChanged(authInstance, async (currentUser) => {
                if (currentUser) {
                    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
                    let role = currentUser.isAnonymous ? 'guest' : 'user';
                    let email = currentUser.isAnonymous ? 'Ambiente Homologado' : currentUser.email;

                    if (!currentUser.isAnonymous) {
                         const userDocRef = doc(getFirestore(app), `artifacts/${appId}/users/${currentUser.uid}/profile/main`);
                         const userDocSnap = await getDoc(userDocRef);
                         if (userDocSnap.exists()) {
                            role = userDocSnap.data().role;
                         }
                    }
                    
                    setUser({
                        uid: currentUser.uid,
                        email: email,
                        role: role,
                        isAnonymous: currentUser.isAnonymous
                    });
                } else {
                    setUser(null);
                }
                setIsAuthReady(true);
                setIsLoading(false);
            });
        } catch (e) { 
            console.error("Erro ao inicializar Firebase", e); 
            setIsLoading(false); 
        }
        
    }, []);

    useEffect(() => {
        if (!isAuthReady || !db || !user) return;
        
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const userDocPath = `artifacts/${appId}/users/${user.uid}`;
        
        const settingsDocRef = doc(db, `${userDocPath}/settings/main`);
        const facilitiesQuery = query(collection(db, `${userDocPath}/facilities`));

        // Mock data for carbon market
        const mockCredits = [
            { id: 'proj1', name: 'Reflorestamento Amazônia', location: 'Brasil', type: 'Nature-Based', standard: 'Verra', price: 15.50, volume: 50000 },
            { id: 'proj2', name: 'Energia Eólica Ceará', location: 'Brasil', type: 'Renewable Energy', standard: 'Gold Standard', price: 22.00, volume: 120000 },
            { id: 'proj3', name: 'Cozinha Eficiente', location: 'Quênia', type: 'Community', standard: 'Verra', price: 12.75, volume: 35000 },
        ];
        setCarbonCredits(mockCredits);

        getDoc(settingsDocRef).then(docSnap => {
            if (docSnap.exists()) {
                setSettings(docSnap.data());
                setShowOnboarding(false);
            } else {
                const unsubFacilities = onSnapshot(facilitiesQuery, (snapshot) => {
                    if (snapshot.empty) {
                        setShowOnboarding(true);
                    }
                    unsubFacilities(); 
                });
            }
        });

        const initialDataQuery = query(collection(db, `${userDocPath}/carbon_activity_data`), orderBy('date', 'desc'), limit(50));
        const initialSubscribes = [
            onSnapshot(initialDataQuery, (snapshot) => {
                const data = snapshot.docs.map(d => ({ id: d.id, ...d.data() }));
                setActivityData(data);
                if (!snapshot.empty) {
                    setLastDoc(snapshot.docs[snapshot.docs.length - 1]);
                    setHasMoreData(snapshot.docs.length === 50);
                } else {
                    setHasMoreData(false);
                }
            }),
            onSnapshot(facilitiesQuery, (s) => setFacilities(s.docs.map(d => ({ id: d.id, ...d.data() })))),
            onSnapshot(query(collection(db, `${userDocPath}/carbon_goals`)), (s) => setGoals(s.docs.map(d => ({ id: d.id, ...d.data() })))),
            onSnapshot(query(collection(db, `${userDocPath}/reduction_initiatives`)), (s) => setInitiatives(s.docs.map(d => ({ id: d.id, ...d.data() })))),
            onSnapshot(query(collection(db, `${userDocPath}/climate_risks`)), (s) => setRisks(s.docs.map(d => ({ id: d.id, ...d.data() })))),
            onSnapshot(query(collection(db, `${userDocPath}/suppliers`)), (s) => setSuppliers(s.docs.map(d => ({ id: d.id, ...d.data() })))),
            onSnapshot(query(collection(db, `${userDocPath}/carbon_portfolio`)), (s) => setPortfolio(s.docs.map(d => ({ id: d.id, ...d.data() })))),
            onSnapshot(settingsDocRef, (doc) => { if (doc.exists()) setSettings(doc.data()); })
        ];

        return () => initialSubscribes.forEach(unsub => unsub());
    }, [db, user, isAuthReady]);

    const loadMoreData = async () => {
        if (!db || !user || !hasMoreData) return;
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const userDocPath = `artifacts/${appId}/users/${user.uid}`;
        const nextQuery = query(collection(db, `${userDocPath}/carbon_activity_data`), orderBy('date', 'desc'), startAfter(lastDoc), limit(50));
        
        const snapshot = await getDocs(nextQuery);
        const newDocs = snapshot.docs.map(d => ({ id: d.id, ...d.data() }));
        setActivityData(prevData => [...prevData, ...newDocs]);
        if (!snapshot.empty) {
            setLastDoc(snapshot.docs[snapshot.docs.length - 1]);
            setHasMoreData(snapshot.docs.length === 50);
        } else {
            setHasMoreData(false);
        }
    };

    useEffect(() => {
        if (activityData.length > 0 && settings?.alertThreshold > 0) {
            const monthlyEmissions = {};
            activityData.forEach(item => {
                const month = new Date(item.date).toLocaleString('pt-BR', { month: 'long' });
                monthlyEmissions[month] = (monthlyEmissions[month] || 0) + (item.emissions_kgCO2e || 0);
            });

            const newAlerts = [];
            for (const month in monthlyEmissions) {
                const emissionsInTonnes = monthlyEmissions[month] / 1000;
                if (emissionsInTonnes > settings.alertThreshold) {
                    newAlerts.push(`Emissões em ${month} (${emissionsInTonnes.toFixed(2)} tCO₂e) ultrapassaram o seu limite de ${settings.alertThreshold} tCO₂e.`);
                }
            }
            setAlerts(newAlerts);
        }
    }, [activityData, settings]);
    
    // Auth Handlers
    const handleSignIn = async (email, password) => {
        setAuthError('');
        try {
            await signInWithEmailAndPassword(auth, email, password);
        } catch (e) {
            setAuthError('Falha ao iniciar sessão. Verifique o e-mail e a senha.');
        }
    };

    const handleSignUp = async (email, password, role) => {
        setAuthError('');
        try {
            const userCredential = await createUserWithEmailAndPassword(auth, email, password);
            const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
            const userDocRef = doc(db, `artifacts/${appId}/users/${userCredential.user.uid}/profile/main`);
            await setDoc(userDocRef, { email: email, role: role, createdAt: new Date() });
        } catch (e) {
            setAuthError('Falha ao criar conta. Tente novamente.');
        }
    };

    const handleAnonymousSignIn = async () => {
         setAuthError('');
        try {
            await signInAnonymously(auth);
        } catch (e) {
            setAuthError('Falha ao entrar como utilizador anónimo.');
        }
    };

    const handleSignOut = async () => {
        setAuthError('');
        try {
            await signOut(auth);
        } catch (e) {
            console.error("Erro ao sair", e);
        }
    };
    
    // Audit log
    const addAuditLog = async (action, details) => {
        if (!db || !user) return;
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        await addDoc(collection(db, `artifacts/${appId}/users/${user.uid}/audit_log`), {
            action,
            details,
            timestamp: new Date(),
            userId: user.uid
        });
    };

    const handleOnboardingComplete = async (config) => {
        if (!db || !user) return;
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        
        await addDoc(collection(db, `artifacts/${appId}/users/${user.uid}/facilities`), { name: sanitizeString(config.facilityName), createdAt: new Date() });
        const settingsDocRef = doc(db, `artifacts/${appId}/users/${user.uid}/settings/main`);
        await setDoc(settingsDocRef, {
            inventoryPeriod: config.inventoryPeriod,
            selectedScopes: config.selectedScopes,
            onboardingCompleted: true,
            activeLibraries: ['GHG Protocol / IPCC'],
            alertThreshold: 1000,
        });
        setShowOnboarding(false);
        await addAuditLog('onboarding_completed', { facilityName: config.facilityName, inventoryPeriod: config.inventoryPeriod });
    };
    
    // Handlers for data manipulation
    const handleSaveActivityData = async (data) => { 
        if (!db || !user) return; 
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; 
        const emissionData = calculateEmissions(data.category, data.unit, data.quantity, settings?.activeLibraries || ['GHG Protocol / IPCC']); 
        const dataToSave = { ...data, ...emissionData, createdAt: new Date() }; 
        await addDoc(collection(db, `artifacts/${appId}/users/${user.uid}/carbon_activity_data`), dataToSave); 
        setIsAddDataModalOpen(false); 
        setToast({ message: "Dados de atividade salvos com sucesso!", type: "success" });
        await addAuditLog('activity_data_added', { scope: data.scope, category: data.category, quantity: data.quantity, unit: data.unit });
    };

    const handleSaveCsvData = async (data) => { 
        if (!db || !user) return; 
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; 
        const library = settings?.activeLibraries || ['GHG Protocol / IPCC']; 
        
        const chunkSize = 499; 
        const chunks = [];
        for (let i = 0; i < data.length; i += chunkSize) {
            chunks.push(data.slice(i, i + chunkSize));
        }

        let successfulImports = 0;
        let totalImports = data.length;

        for (const chunk of chunks) {
            const currentBatch = writeBatch(db);
            chunk.forEach(row => { 
                const sanitizedRow = {
                    date: sanitizeString(row.date),
                    scope: sanitizeString(row.scope),
                    category: sanitizeString(row.category),
                    facility: sanitizeString(row.facility),
                    quantity: Number(row.quantity),
                    unit: sanitizeString(row.unit),
                };

                if (sanitizedRow.quantity > 0) {
                    const emissionData = calculateEmissions(sanitizedRow.category, sanitizedRow.unit, sanitizedRow.quantity, library); 
                    const docRef = doc(collection(db, `artifacts/${appId}/users/${user.uid}/carbon_activity_data`)); 
                    currentBatch.set(docRef, { ...sanitizedRow, ...emissionData, createdAt: new Date() });
                }
            });
            await currentBatch.commit();
            successfulImports += chunk.length;
            setToast({ message: `Importando dados... ${Math.round((successfulImports / totalImports) * 100)}% concluído`, type: "info" });
        }

        setToast({ message: "Dados importados via CSV com sucesso!", type: "success" });
        setIsImportCsvModalOpen(false);
        await addAuditLog('csv_import_completed', { importedCount: totalImports });
    };
    const handleDeleteActivityData = async (id) => { if (!db || !user) return; const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; await deleteDoc(doc(db, `artifacts/${appId}/users/${user.uid}/carbon_activity_data`, id)); setToast({ message: "Dado de atividade removido com sucesso.", type: "success" }); await addAuditLog('activity_data_deleted', { docId: id }); };
    const handleSaveFacility = async (data) => { if (!db || !user) return; const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; await addDoc(collection(db, `artifacts/${appId}/users/${user.uid}/facilities`), { ...data, createdAt: new Date() }); setToast({ message: "Unidade adicionada com sucesso!", type: "success" }); await addAuditLog('facility_added', { name: data.name }); };
    const handleDeleteFacility = async (id) => { if (!db || !user) return; const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; await deleteDoc(doc(db, `artifacts/${appId}/users/${user.uid}/facilities`, id)); setToast({ message: "Unidade removida com sucesso.", type: "success" }); await addAuditLog('facility_deleted', { docId: id });};
    const handleSaveGoal = async (goalData) => { if (!db || !user) return; const baselineEmissions = activityData.filter(d => new Date(d.date).getFullYear() === parseInt(goalData.baselineYear)).reduce((sum, i) => sum + (i.emissions_kgCO2e || 0), 0) / 1000; const targetValue = baselineEmissions * (1 - (Number(goalData.reductionPercentage) / 100)); const goalToSave = { ...goalData, baselineValue: baselineEmissions, targetValue: targetValue, currentValue: 0, unit: 'tCO₂e', createdAt: new Date() }; const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; await addDoc(collection(db, `artifacts/${appId}/users/${user.uid}/carbon_goals`), { ...goalToSave, description: sanitizeString(goalToSave.description), intensityMetric: sanitizeString(goalToSave.intensityMetric) }); setIsAddGoalModalOpen(false); setToast({ message: "Meta de redução adicionada com sucesso!", type: "success" }); await addAuditLog('goal_added', { description: goalData.description });};
    const handleDeleteGoal = async (id) => { if (!db || !user) return; const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; await deleteDoc(doc(db, `artifacts/${appId}/users/${user.uid}/carbon_goals`, id)); setToast({ message: "Meta removida com sucesso.", type: "success" }); await addAuditLog('goal_deleted', { docId: id });};
    const handleSaveInitiative = async (data) => { if (!db || !user) return; const dataToSave = { ...data, cost: Number(data.cost), reduction_tCO2e: Number(data.reduction_tCO2e), createdAt: new Date() }; const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; await addDoc(collection(db, `artifacts/${appId}/users/${user.uid}/reduction_initiatives`), { ...dataToSave, name: sanitizeString(dataToSave.name), category: sanitizeString(dataToSave.category), status: sanitizeString(dataToSave.status) }); setToast({ message: "Iniciativa adicionada com sucesso!", type: "success" }); await addAuditLog('initiative_added', { name: data.name }); };
    const handleDeleteInitiative = async (id) => { if (!db || !user) return; const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; await deleteDoc(doc(db, `artifacts/${appId}/users/${user.uid}/reduction_initiatives`, id)); setToast({ message: "Iniciativa removida com sucesso.", type: "success" }); await addAuditLog('initiative_deleted', { docId: id });};
    const handleSaveRisk = async (data) => { if (!db || !user) return; const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; await addDoc(collection(db, `artifacts/${appId}/users/${user.uid}/climate_risks`), { ...data, description: sanitizeString(data.description), mitigation: sanitizeString(data.mitigation), type: sanitizeString(data.type) }); setToast({ message: "Risco adicionado com sucesso!", type: "success" }); await addAuditLog('risk_added', { description: data.description });};
    const handleDeleteRisk = async (id) => { if (!db || !user) return; const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; await deleteDoc(doc(db, `artifacts/${appId}/users/${user.uid}/climate_risks`, id)); setToast({ message: "Risco removido com sucesso.", type: "success" }); await addAuditLog('risk_deleted', { docId: id });};
    const handleSaveSupplier = async (data) => { if (!db || !user) return; const emissionData = calculateEmissions('1. Bens e Serviços Adquiridos', 'eur', Number(data.spend), settings?.activeLibraries || ['GHG Protocol / IPCC']); const dataToSave = { ...data, ...emissionData, createdAt: new Date() }; const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; await addDoc(collection(db, `artifacts/${appId}/users/${user.uid}/suppliers`), { ...dataToSave, name: sanitizeString(dataToSave.name), category: sanitizeString(dataToSave.category) }); setToast({ message: "Fornecedor adicionado com sucesso!", type: "success" }); await addAuditLog('supplier_added', { name: data.name });};
    const handleDeleteSupplier = async (id) => { if (!db || !user) return; const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; await deleteDoc(doc(db, `artifacts/${appId}/users/${user.uid}/suppliers`, id)); setToast({ message: "Fornecedor removido com sucesso.", type: "success" }); await addAuditLog('supplier_deleted', { docId: id });};
    const handleAddDataClick = (isOpen, props = {}) => { setAddDataModalProps(props); setIsAddDataModalOpen(isOpen); };
    const handleSaveSettings = async (newSettings) => { if (!db || !user) return; const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; const settingsDocRef = doc(db, `artifacts/${appId}/users/${user.uid}/settings/main`); await setDoc(settingsDocRef, newSettings, { merge: true }); setToast({ message: "Configurações salvas com sucesso!", type: "success" }); await addAuditLog('settings_updated', { settings: newSettings });};
    
    const handleBuyCredit = async (credit) => {
        if (!db || !user) return;
        const quantityToBuy = 100;
        const existingPortfolioItem = portfolio.find(p => p.projectId === credit.id);
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

        const sanitizedCredit = {
            ...credit,
            name: sanitizeString(credit.name),
            location: sanitizeString(credit.location),
            type: sanitizeString(credit.type),
            standard: sanitizeString(credit.standard),
        };

        if(existingPortfolioItem) {
            const docRef = doc(db, `artifacts/${appId}/users/${user.uid}/carbon_portfolio`, existingPortfolioItem.id);
            await updateDoc(docRef, {
                quantity: existingPortfolioItem.quantity + quantityToBuy
            });
        } else {
            await addDoc(collection(db, `artifacts/${appId}/users/${user.uid}/carbon_portfolio`), {
                projectId: sanitizedCredit.id,
                name: sanitizedCredit.name,
                quantity: quantityToBuy,
                price: sanitizedCredit.price,
                purchaseDate: new Date()
            });
        }
        setToast({ message: "Créditos comprados com sucesso!", type: "success" });
        await addAuditLog('credits_purchased', { creditName: credit.name, quantity: quantityToBuy });
    };

    const handleReportModal = (framework) => {
        setSelectedFramework(framework);
        setIsFrameworkReportModalOpen(true);
    };

    const handleGeneratePrivateReport = () => {
        setIsPrivateReportModalOpen(true);
    };
    
    const handleGhgInfoClick = () => {
        setIsGhgInfoModalOpen(true);
    };
    
    const handleAuditingModalOpen = () => {
        setIsAuditingModalOpen(true);
    };

    const renderPage = () => {
        if (showOnboarding) {
            return <OnboardingWizard onComplete={handleOnboardingComplete} />;
        }
        switch (activePage) {
            case 'dashboard': return <DashboardPage activityData={activityData} goals={goals} alerts={alerts} />;
            case 'inventory': return <InventoryPage activityData={activityData} facilities={facilities} settings={settings} onAddClick={(isOpen, props) => handleAddDataClick(isOpen, props)} onDelete={handleDeleteActivityData} onImportClick={() => setIsImportCsvModalOpen(true)} loadMoreData={loadMoreData} lastDoc={lastDoc} hasMoreData={hasMoreData} onGhgInfoClick={handleGhgInfoClick} />;
            case 'strategy': return <StrategyPage goals={goals} onAddGoalClick={() => setIsAddGoalModalOpen(true)} onDeleteGoal={handleDeleteGoal} initiatives={initiatives} onSaveInitiative={handleSaveInitiative} onDeleteInitiative={handleDeleteInitiative} activityData={activityData} />;
            case 'reporting': return <ReportingPage activityData={activityData} facilities={facilities} settings={settings} user={user} onGeneratePrivateReport={handleGeneratePrivateReport} />;
            case 'auditing': return <AuditingPage onAuditingModalOpen={handleAuditingModalOpen} />;
            case 'settings': return <SettingsPage facilities={facilities} onManageFacilitiesClick={() => setIsManageFacilitiesModalOpen(true)} settings={settings} onSaveSettings={handleSaveSettings} />;
            case 'risk': return <RiskPage risks={risks} onSaveRisk={handleSaveRisk} onDeleteRisk={handleDeleteRisk} />;
            case 'supplychain': return <SupplyChainPage suppliers={suppliers} onSaveSupplier={handleSaveSupplier} onDeleteSupplier={handleDeleteSupplier} />;
            case 'market': return <MarketPage credits={carbonCredits} portfolio={portfolio} onBuyCredit={handleBuyCredit} />;
            default: return <PlaceholderPage title={activePage} />;
        }
    };

    if (isLoading) {
        return <LoadingSpinner />;
    }

    if (!user) {
        return <AuthPage onSignIn={handleSignIn} onSignUp={handleSignUp} onAnonymousSignIn={handleAnonymousSignIn} isLogin={isLogin} setIsLogin={setIsLogin} error={authError} />;
    }

    return (
        <div className="flex h-screen bg-gray-100 font-sans">
            <Sidebar activePage={activePage} setActivePage={setActivePage} isOpen={isSidebarOpen} setIsOpen={setIsSidebarOpen} user={user} onSignOut={handleSignOut} />
            <div className="flex-1 flex flex-col md:ml-64">
                <header className="bg-white shadow-md p-4 md:hidden flex justify-between items-center">
                    <img src="https://indiciumfin.github.io/indicium360/assets/images/indicium360-logo.webp" alt="Indicium360 Logo" className="h-8" loading="lazy" />
                    <button onClick={() => setIsSidebarOpen(true)} aria-label="Abrir menu de navegação">
                        <MenuIcon />
                    </button>
                </header>
                <main className="flex-1 p-4 md:p-10 overflow-auto">
                    {showOnboarding && <OnboardingWizard onComplete={handleOnboardingComplete} />}
                    {!showOnboarding && renderPage()}
                </main>
            </div>
            {isAddDataModalOpen && <AddDataModal onSave={handleSaveActivityData} onClose={() => setIsAddDataModalOpen(false)} facilities={facilities} setToast={setToast} {...addDataModalProps} />}
            {isManageFacilitiesModalOpen && <ManageFacilitiesModal facilities={facilities} onSave={handleSaveFacility} onDelete={handleDeleteFacility} onClose={() => setIsManageFacilitiesModalOpen(false)} setToast={setToast}/>}
            {isAddGoalModalOpen && <AddGoalModal onSave={handleSaveGoal} onClose={() => setIsAddGoalModalOpen(false)} setToast={setToast}/>}
            {isFrameworkReportModalOpen && <FrameworkReportModal framework={selectedFramework} data={{ activityData, goals, facilities, settings, user }} onClose={() => setIsFrameworkReportModalOpen(false)} />}
            {isImportCsvModalOpen && <ImportCsvModal onSave={handleSaveCsvData} onClose={() => setIsImportCsvModalOpen(false)} setToast={setToast} />}
            {isGhgInfoModalOpen && <GhgInfoModal onClose={() => setIsGhgInfoModalOpen(false)} />}
            {isAuditingModalOpen && <AuditingModal onClose={() => setIsAuditingModalOpen(false)} />}
            {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}
            {isPrivateReportModalOpen && <PrivateReportModal onClose={() => setIsPrivateReportModalOpen(false)} user={user} />}
        </div>
    );
}

export default App;
